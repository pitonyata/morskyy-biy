import tkinter as tk
from tkinter import messagebox
import random
from typing import List, Tuple, Optional
from kraken import Kraken
from rockets import RocketsManager
from ai_controllers import EasyAIController, HardAIController
from Board import Board, CellState, Orientation, Ship

class MainMenu:
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –≥—Ä–∏ –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("–ú–æ—Ä—Å—å–∫–∏–π –±—ñ–π")
        self.root.resizable(True, True)  # –î–æ–∑–≤–æ–ª—è—î–º–æ –∑–º—ñ–Ω—É —Ä–æ–∑–º—ñ—Ä—É
        self.root.configure(bg='#1a1a2e')
        
        # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –≤—ñ–∫–Ω–∞
        self.root.minsize(600, 700)
        
        # –¶–µ–Ω—Ç—Ä—É—î–º–æ –≤—ñ–∫–Ω–æ - –∞–¥–∞–ø—Ç–∏–≤–Ω—ñ –≤—ñ–¥—Å—Ç—É–ø–∏
        window_width = 650
        window_height = 760  # —Ç—Ä–æ—Ö–∏ –º–µ–Ω—à–µ, —â–æ–± –≤–∞–∂–ª–∏–≤—ñ –∫–Ω–æ–ø–∫–∏ –±—É–ª–∏ –≤–∏–¥–∏–º—ñ –Ω–∞ –Ω–µ–≤–µ–ª–∏–∫–∏—Ö –µ–∫—Ä–∞–Ω–∞—Ö
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        
        # –Ø–∫—â–æ –µ–∫—Ä–∞–Ω –º–∞–ª–µ–Ω—å–∫–∏–π, –∑–º–µ–Ω—à—É—î–º–æ –≤—ñ–∫–Ω–æ
        if screen_height < 900:
            window_height = int(screen_height * 0.92)
        
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        self.selected_board_size = 10  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
        
        self.setup_menu()
        self.animate_title()
    
    def setup_menu(self):
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä + Canvas –∑—ñ scrollbar –¥–ª—è –ø—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è –º–µ–Ω—é
        container = tk.Frame(self.root, bg='#1a1a2e')
        container.pack(fill=tk.BOTH, expand=True)

        canvas = tk.Canvas(container, bg='#1a1a2e', highlightthickness=0)
        v_scroll = tk.Scrollbar(container, orient=tk.VERTICAL, command=canvas.yview)
        canvas.configure(yscrollcommand=v_scroll.set)

        v_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π frame –∫—É–¥–∏ –¥–æ–¥–∞—é—Ç—å—Å—è –≤—Å—ñ –≤—ñ–¥–∂–µ—Ç–∏ –º–µ–Ω—é
        main_frame = tk.Frame(canvas, bg='#1a1a2e')
        window_id = canvas.create_window((0, 0), window=main_frame, anchor='nw')

        # –û–Ω–æ–≤–ª—é—î–º–æ –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–∑–º—ñ—Ä—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        def on_frame_config(event):
            canvas.configure(scrollregion=canvas.bbox("all"))
        main_frame.bind("<Configure>", on_frame_config)

        # –ü—ñ–¥–ª–∞—à—Ç–æ–≤—É—î–º–æ —à–∏—Ä–∏–Ω—É –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–∑–º—ñ—Ä—É –∫–∞–Ω–≤–∏
        def on_canvas_resize(event):
            canvas.itemconfig(window_id, width=event.width)
        canvas.bind("<Configure>", on_canvas_resize)

        # –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ñ —Ö–≤–∏–ª—ñ –∑–≤–µ—Ä—Ö—É
        wave_frame = tk.Frame(main_frame, bg='#1a1a2e', height=30)
        wave_frame.pack(fill=tk.X, pady=(0, 20))

        wave_label = tk.Label(
            wave_frame,
            text="„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è",
            font=('Arial', 16),
            fg='#00d4ff',
            bg='#1a1a2e'
        )
        wave_label.pack()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –µ–º–æ–¥–∑—ñ
        self.title_label = tk.Label(
            main_frame,
            text="‚öì –ú–û–†–°–¨–ö–ò–ô –ë–Ü–ô ‚öì",
            font=('Arial', 42, 'bold'),
            fg='#00d4ff',
            bg='#1a1a2e'
        )
        self.title_label.pack(pady=(20, 10))

        # –ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle = tk.Label(
            main_frame,
            text="üö¢ –ë–∏—Ç–≤–∞ –Ω–∞ –º–æ—Ä—ñ üö¢",
            font=('Arial', 18),
            fg='#00ff88',
            bg='#1a1a2e'
        )
        subtitle.pack(pady=(0, 20))

        # –ë–ª–æ–∫ –≤–∏–±–æ—Ä—É —Ä–æ–∑–º—ñ—Ä—É –ø–æ–ª—è
        size_frame = tk.Frame(main_frame, bg='#0f3460', relief=tk.RAISED, bd=2)
        size_frame.pack(pady=12, padx=20, fill=tk.X)

        size_title = tk.Label(
            size_frame,
            text="üìè –û–ë–ï–†–Ü–¢–¨ –†–û–ó–ú–Ü–† –ü–û–õ–Ø",
            font=('Arial', 14, 'bold'),
            fg='#00d4ff',
            bg='#0f3460'
        )
        size_title.pack(pady=(12, 8))

        # –ö–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É —Ä–æ–∑–º—ñ—Ä—É
        size_buttons_frame = tk.Frame(size_frame, bg='#0f3460')
        size_buttons_frame.pack(pady=(5, 12))

        # –ú–∞–ª–µ–Ω—å–∫–µ –ø–æ–ª–µ 6x6
        self.small_btn = tk.Button(
            size_buttons_frame,
            text="üî∏ –ú–ê–õ–ï–ù–¨–ö–ï\n6√ó6\n5 –∫–æ—Ä–∞–±–ª—ñ–≤",
            font=('Arial', 11, 'bold'),
            bg='#4a5568',
            fg='#ffffff',
            activebackground='#5a6578',
            relief=tk.RAISED,
            bd=3,
            padx=15,
            pady=12,
            cursor='hand2',
            command=lambda: self.select_board_size(6)
        )
        self.small_btn.pack(side=tk.LEFT, padx=8)
        
        # –ù–æ—Ä–º–∞–ª—å–Ω–µ –ø–æ–ª–µ 10x10
        self.normal_btn = tk.Button(
            size_buttons_frame,
            text="üî∑ –ù–û–†–ú–ê–õ–¨–ù–ï\n10√ó10\n10 –∫–æ—Ä–∞–±–ª—ñ–≤",
            font=('Arial', 11, 'bold'),
            bg='#00ff88',
            fg='#1a2a2e',
            activebackground='#00cc6f',
            relief=tk.SUNKEN,
            bd=3,
            padx=15,
            pady=12,
            cursor='hand2',
            command=lambda: self.select_board_size(10)
        )
        self.normal_btn.pack(side=tk.LEFT, padx=8)
        
        # –í–µ–ª–∏–∫–µ –ø–æ–ª–µ 14x14
        self.large_btn = tk.Button(
            size_buttons_frame,
            text="üî∂ –í–ï–õ–ò–ö–ï\n14√ó14\n15 –∫–æ—Ä–∞–±–ª—ñ–≤",
            font=('Arial', 11, 'bold'),
            bg='#4a5568',
            fg='#ffffff',
            activebackground='#5a6578',
            relief=tk.RAISED,
            bd=3,
            padx=15,
            pady=12,
            cursor='hand2',
            command=lambda: self.select_board_size(14)
        )
        self.large_btn.pack(side=tk.LEFT, padx=8)

        # --- –ù–æ–≤–∏–π –±–ª–æ–∫ –≤–∏–±–æ—Ä—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ ---
        difficulty_frame = tk.Frame(main_frame, bg='#0f3460', relief=tk.RAISED, bd=2)
        difficulty_frame.pack(pady=20, padx=20, fill=tk.X)

        diff_title = tk.Label(
            difficulty_frame,
            text="ü§ñ –û–ë–ï–†–Ü–¢–¨ –°–ö–õ–ê–î–ù–Ü–°–¢–¨ AI",
            font=('Arial', 14, 'bold'),
            fg='#00d4ff',
            bg='#0f3460'
        )
        diff_title.pack(pady=(15, 10))

        diff_buttons_frame = tk.Frame(difficulty_frame, bg='#0f3460')
        diff_buttons_frame.pack(pady=(5, 15))

        self.difficulty = "easy"

        def select_difficulty(level):
            self.difficulty = level
            easy_btn.config(bg='#00ff88' if level == "easy" else '#4a5568',
                            fg='#1a1a2e' if level == "easy" else '#ffffff',
                            relief=tk.SUNKEN if level == "easy" else tk.RAISED)
            hard_btn.config(bg='#00ff88' if level == "hard" else '#4a5568',
                            fg='#1a2a2e' if level == "hard" else '#ffffff',
                            relief=tk.SUNKEN if level == "hard" else tk.RAISED)

        easy_btn = tk.Button(
            diff_buttons_frame,
            text="üò¥ EASY",
            font=('Arial', 12, 'bold'),
            bg='#00ff88',
            fg='#1a2a2e',
            relief=tk.SUNKEN,
            padx=20,
            pady=10,
            cursor='hand2',
            command=lambda: select_difficulty("easy")
        )
        easy_btn.pack(side=tk.LEFT, padx=8)

        hard_btn = tk.Button(
            diff_buttons_frame,
            text="üíÄ HARD",
            font=('Arial', 12, 'bold'),
            bg='#4a5568',
            fg='#ffffff',
            relief=tk.RAISED,
            padx=20,
            pady=10,
            cursor='hand2',
            command=lambda: select_difficulty("hard")
        )
        hard_btn.pack(side=tk.LEFT, padx=8)

        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        buttons_frame = tk.Frame(main_frame, bg='#1a1a2e')
        buttons_frame.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤–∞ –≥—Ä–∞"
        self.play_button = tk.Button(
            buttons_frame,
            text="üéÆ  –ü–û–ß–ê–¢–ò –ì–†–£",
            font=('Arial', 18, 'bold'),
            bg='#00ff88',
            fg='#1a2a2e',
            activebackground='#00cc6f',
            relief=tk.FLAT,
            padx=50,
            pady=20,
            cursor='hand2',
            command=self.start_game
        )
        self.play_button.pack(pady=15)
        
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ –≥—Ä—É"
        self.about_button = tk.Button(
            buttons_frame,
            text="‚ÑπÔ∏è  –ü–†–û –ì–†–£",
            font=('Arial', 16, 'bold'),
            bg='#00d4ff',
            fg='#1a2a2e',
            activebackground='#00a8cc',
            relief=tk.FLAT,
            padx=50,
            pady=18,
            cursor='hand2',
            command=self.show_about
        )
        self.about_button.pack(pady=15)
        
        # –ö–Ω–æ–ø–∫–∞ "–í–∏—Ö—ñ–¥ –∑ –≥—Ä–∏"
        self.exit_button = tk.Button(
            buttons_frame,
            text="üö™  –í–ò–•–Ü–î –ó –ì–†–ò",
            font=('Arial', 18, 'bold'),
            bg='#ff4444',
            fg='#ffffff',
            activebackground='#cc3333',
            relief=tk.FLAT,
            padx=50,
            pady=20,
            cursor='hand2',
            command=self.exit_game
        )
        self.exit_button.pack(pady=15)
        
        # –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ñ —Ö–≤–∏–ª—ñ –∑–Ω–∏–∑—É
        bottom_wave_frame = tk.Frame(main_frame, bg='#1a1a2e')
        bottom_wave_frame.pack(side=tk.BOTTOM, fill=tk.X, pady=(20, 0))
        
        bottom_wave = tk.Label(
            bottom_wave_frame,
            text="„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è",
            font=('Arial', 16),
            fg='#00d4ff',
            bg='#1a1a2e'
        )
        bottom_wave.pack()
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–µ—Ä—Å—ñ—é
        version_label = tk.Label(
            bottom_wave_frame,
            text="–≤–µ—Ä—Å—ñ—è 2.1",
            font=('Arial', 10),
            fg='#666666',
            bg='#1a1a2e'
        )
        version_label.pack(pady=(10, 0))
        
        # –î–æ–¥–∞—î–º–æ –µ—Ñ–µ–∫—Ç–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è
        self.add_button_effects()
    
    def select_board_size(self, size: int):
        """–í–∏–±—ñ—Ä —Ä–æ–∑–º—ñ—Ä—É —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è"""
        self.selected_board_size = size
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –≤–∏–≥–ª—è–¥ –∫–Ω–æ–ø–æ–∫
        self.small_btn.config(
            bg='#00ff88' if size == 6 else '#4a5568',
            fg='#1a2a2e' if size == 6 else '#ffffff',
            relief=tk.SUNKEN if size == 6 else tk.RAISED
        )
        self.normal_btn.config(
            bg='#00ff88' if size == 10 else '#4a5568',
            fg='#1a2a2e' if size == 10 else '#ffffff',
            relief=tk.SUNKEN if size == 10 else tk.RAISED
        )
        self.large_btn.config(
            bg='#00ff88' if size == 14 else '#4a5568',
            fg='#1a2a2e' if size == 14 else '#ffffff',
            relief=tk.SUNKEN if size == 14 else tk.RAISED
        )
    
    def add_button_effects(self):
        """–î–æ–¥–∞—î –µ—Ñ–µ–∫—Ç–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è –∫–Ω–æ–ø–æ–∫"""
        def on_enter_play(e):
            self.play_button.config(bg='#00cc6f', font=('Arial', 19, 'bold'))
        
        def on_leave_play(e):
            self.play_button.config(bg='#00ff88', font=('Arial', 18, 'bold'))
        
        def on_enter_about(e):
            self.about_button.config(bg='#00a8cc', font=('Arial', 17, 'bold'))
        
        def on_leave_about(e):
            self.about_button.config(bg='#00d4ff', font=('Arial', 16, 'bold'))
        
        def on_enter_exit(e):
            self.exit_button.config(bg='#cc3333', font=('Arial', 19, 'bold'))
        
        def on_leave_exit(e):
            self.exit_button.config(bg='#ff4444', font=('Arial', 18, 'bold'))
        
        self.play_button.bind('<Enter>', on_enter_play)
        self.play_button.bind('<Leave>', on_leave_play)
        self.about_button.bind('<Enter>', on_enter_about)
        self.about_button.bind('<Leave>', on_leave_about)
        self.exit_button.bind('<Enter>', on_enter_exit)
        self.exit_button.bind('<Leave>', on_leave_exit)
    
    def exit_game(self):
        """–í–∏—Ö–æ–¥–∏—Ç—å –∑ –ø—Ä–æ–≥—Ä–∞–º–∏ –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º –≤ —Å—Ç–∏–ª—ñ –≥—Ä–∏"""
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Å—Ç–æ–º–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        confirm_window = tk.Toplevel(self.root)
        confirm_window.title("–í–∏—Ö—ñ–¥ –∑ –≥—Ä–∏")
        confirm_window.configure(bg='#1a1a2e')
        confirm_window.resizable(False, False)
        confirm_window.grab_set()
        
        # –¶–µ–Ω—Ç—Ä—É—î–º–æ –≤—ñ–∫–Ω–æ
        window_width = 420
        window_height = 360
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        confirm_window.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        main_frame = tk.Frame(confirm_window, bg='#1a1a2e', padx=30, pady=30)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –Ü–∫–æ–Ω–∫–∞
        icon_label = tk.Label(
            main_frame,
            text="‚öì",
            font=('Arial', 40),
            fg='#00d4ff',
            bg='#1a1a2e'
        )
        icon_label.pack(pady=(0, 10))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            main_frame,
            text="–í–ò–•–Ü–î –ó –ì–†–ò",
            font=('Arial', 18, 'bold'),
            fg='#ff4444',
            bg='#1a1a2e'
        )
        title_label.pack(pady=(0, 8))
        
        # –¢–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è
        question_label = tk.Label(
            main_frame,
            text="–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ\n–ø–æ–∫–∏–Ω—É—Ç–∏ –≥—Ä—É?",
            font=('Arial', 13),
            fg='#ffffff',
            bg='#1a1a2e',
            justify=tk.CENTER
        )
        question_label.pack(pady=(0, 20))
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—é —à–∏—Ä–∏–Ω–æ—é
        buttons_container = tk.Frame(main_frame, bg='#1a1a2e')
        buttons_container.pack()
        
        # –ö–Ω–æ–ø–∫–∞ "–¢–∞–∫" - —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —à–∏—Ä–∏–Ω–∞
        yes_btn = tk.Button(
            buttons_container,
            text="‚úì  –¢–ê–ö",
            font=('Arial', 16, 'bold'),
            bg='#ff4444',
            fg='#ffffff',
            activebackground='#cc3333',
            relief=tk.FLAT,
            width=12,
            pady=12,
            cursor='hand2',
            command=self.root.quit
        )
        yes_btn.pack(pady=6)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù—ñ" - —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —à–∏—Ä–∏–Ω–∞
        no_btn = tk.Button(
            buttons_container,
            text="‚úó  –ù–Ü",
            font=('Arial', 16, 'bold'),
            bg='#00ff88',
            fg='#1a2a2e',
            activebackground='#00cc6f',
            relief=tk.FLAT,
            width=12,
            pady=12,
            cursor='hand2',
            command=confirm_window.destroy
        )
        no_btn.pack(pady=6)
        
        # –ï—Ñ–µ–∫—Ç–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è
        def on_enter_yes(e):
            yes_btn.config(bg='#cc3333', font=('Arial', 17, 'bold'))
        
        def on_leave_yes(e):
            yes_btn.config(bg='#ff4444', font=('Arial', 16, 'bold'))
        
        def on_enter_no(e):
            no_btn.config(bg='#00cc6f', font=('Arial', 17, 'bold'))
        
        def on_leave_no(e):
            no_btn.config(bg='#00ff88', font=('Arial', 16, 'bold'))
        
        yes_btn.bind('<Enter>', on_enter_yes)
        yes_btn.bind('<Leave>', on_leave_yes)
        no_btn.bind('<Enter>', on_enter_no)
        no_btn.bind('<Leave>', on_leave_no)
    
    def animate_title(self):
        """–ê–Ω—ñ–º–∞—Ü—ñ—è –ø—É–ª—å—Å–∞—Ü—ñ—ó –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        colors = ['#00d4ff', '#00a8cc', '#0088aa', '#00a8cc', '#00d4ff']
        self.color_index = 0
        self.animation_running = True
        
        def pulse():
            if self.animation_running and self.title_label.winfo_exists():
                try:
                    self.title_label.config(fg=colors[self.color_index % len(colors)])
                    self.color_index += 1
                    self.root.after(500, pulse)
                except:
                    pass
        
        pulse()
    
    def stop_animation(self):
        """–ó—É–ø–∏–Ω—è—î –∞–Ω—ñ–º–∞—Ü—ñ—é –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–∏—Ç—Ç—è–º –º–µ–Ω—é"""
        self.animation_running = False
    
    def show_about(self):
        """–ü–æ–∫–∞–∑—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä—É"""
        about_window = tk.Toplevel(self.root)
        about_window.title("–ü—Ä–æ –≥—Ä—É")
        about_window.configure(bg='#1a1a2e')
        about_window.resizable(True, True)  # –î–æ–∑–≤–æ–ª—è—î–º–æ –∑–º—ñ–Ω—É —Ä–æ–∑–º—ñ—Ä—É
        about_window.grab_set()
        
        # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä
        about_window.minsize(500, 600)
        
        # –¶–µ–Ω—Ç—Ä—É—î–º–æ –≤—ñ–∫–Ω–æ
        window_width = 550
        window_height = 650
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        about_window.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        main_frame = tk.Frame(about_window, bg='#1a1a2e', padx=30, pady=30)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = tk.Label(
            main_frame,
            text="üéÆ –ü–†–û –ì–†–£",
            font=('Arial', 24, 'bold'),
            fg='#00d4ff',
            bg='#1a1a2e'
        )
        title.pack(pady=(0, 20))
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –±–ª–æ–∫
        info_frame = tk.Frame(main_frame, bg='#0f3460', relief=tk.RAISED, bd=2)
        info_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        info_text = """
üö¢ –ú–û–†–°–¨–ö–ò–ô –ë–Ü–ô - –∫–ª–∞—Å–∏—á–Ω–∞ –≥—Ä–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è

üìã –ü–†–ê–í–ò–õ–ê –ì–†–ò:
‚Ä¢ –†–æ–∑–º—ñ—Å—Ç—ñ—Ç—å —Å–≤–æ—ó –∫–æ—Ä–∞–±–ª—ñ –Ω–∞ –ø–æ–ª—ñ
‚Ä¢ –ü–æ —á–µ—Ä–∑—ñ —Å—Ç—Ä—ñ–ª—è–π—Ç–µ –ø–æ –ø–æ–ª—é –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
‚Ä¢ –ú–µ—Ç–∞: –ø–æ—Ç–æ–ø–∏—Ç–∏ –≤—Å—ñ –∫–æ—Ä–∞–±–ª—ñ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞

üêô –£–í–ê–ì–ê: –ö–†–ê–ö–ï–ù!
‚Ä¢ –ù–∞ —Å–µ—Ä–µ–¥–Ω—ñ—Ö (10√ó10) —Ç–∞ –≤–µ–ª–∏–∫–∏—Ö (14√ó14) –ø–æ–ª—è—Ö
  –∑'—è–≤–ª—è—î—Ç—å—Å—è –ö–†–ê–ö–ï–ù - –º–æ—Ä—Å—å–∫–∏–π –º–æ–Ω—Å—Ç—Ä!
‚Ä¢ –ö—Ä–∞–∫–µ–Ω –∞—Ç–∞–∫—É—î –û–ë–ò–î–í–ê –ø–æ–ª—è –≤–∏–ø–∞–¥–∫–æ–≤–æ
‚Ä¢ –ù–∞ –ø–æ–ª—ñ 10√ó10: –∞—Ç–∞–∫—É—î 1 –∫–ª—ñ—Ç–∏–Ω–∫—É
‚Ä¢ –ù–∞ –ø–æ–ª—ñ 14√ó14: –∞—Ç–∞–∫—É—î –æ–±–ª–∞—Å—Ç—å 3√ó3!
‚Ä¢ –û—Å—Ç–µ—Ä—ñ–≥–∞–π—Ç–µ—Å—è –π–æ–≥–æ –≥–Ω—ñ–≤—É! ‚ö°

üî¢ –†–û–ó–ú–Ü–†–ò –ü–û–õ–Ü–í:

üî∏ –ú–ê–õ–ï–ù–¨–ö–ï (6√ó6):
  ‚Ä¢ 1 –ö—Ä–µ–π—Å–µ—Ä (3), 1 –ï—Å–º—ñ–Ω–µ—Ü—å (2), 3 –ö–∞—Ç–µ—Ä–∏ (1)
  ‚Ä¢ –ö—Ä–∞–∫–µ–Ω –ù–ï –∑'—è–≤–ª—è—î—Ç—å—Å—è ‚úÖ

üî∑ –ù–û–†–ú–ê–õ–¨–ù–ï (10√ó10):
  ‚Ä¢ 1 –õ—ñ–Ω–∫–æ—Ä (4), 2 –ö—Ä–µ–π—Å–µ—Ä–∏ (3)
  ‚Ä¢ 3 –ï—Å–º—ñ–Ω—Ü—ñ (2), 4 –ö–∞—Ç–µ—Ä–∏ (1)
  ‚Ä¢ –ö—Ä–∞–∫–µ–Ω –∞—Ç–∞–∫—É—î 1√ó1 ‚ö†Ô∏è

üî∂ –í–ï–õ–ò–ö–ï (14√ó14):
  ‚Ä¢ 1 –ê–≤—ñ–∞–Ω–æ—Å–µ—Ü—å (5), 2 –õ—ñ–Ω–∫–æ—Ä–∏ (4)
  ‚Ä¢ 3 –ö—Ä–µ–π—Å–µ—Ä–∏ (3), 4 –ï—Å–º—ñ–Ω—Ü—ñ (2), 5 –ö–∞—Ç–µ—Ä—ñ–≤ (1)
  ‚Ä¢ –ö—Ä–∞–∫–µ–Ω –∞—Ç–∞–∫—É—î 3√ó3 ‚ò†Ô∏è

üí° –ü–û–†–ê–î–ò:
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ä–æ–∑—É–º–Ω—É —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é
‚Ä¢ –ö–æ—Ä–∞–±–ª—ñ –Ω–µ —Ç–æ—Ä–∫–∞—é—Ç—å—Å—è –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ
‚Ä¢ –ü—ñ—Å–ª—è –ø–æ—Ç–æ–ø–ª–µ–Ω–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞–≤–∫–æ–ª–æ
  –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–∫—Ä–∏–≤–∞—é—Ç—å—Å—è
‚Ä¢ –ë–µ—Ä–µ–∂—ñ—Ç—å—Å—è –∫—Ä–∞–∫–µ–Ω–∞ –Ω–∞ –≤–µ–ª–∏–∫–∏—Ö –ø–æ–ª—è—Ö!

üé≤ –ë–∞–∂–∞—î–º–æ —É–¥–∞—á—ñ, –∞–¥–º—ñ—Ä–∞–ªe!
        """
        
        info_label = tk.Label(
            info_frame,
            text=info_text,
            font=('Arial', 10),
            fg='#ffffff',
            bg='#0f3460',
            justify=tk.LEFT,
            padx=20,
            pady=15
        )
        info_label.pack(fill=tk.BOTH, expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è
        close_btn = tk.Button(
            main_frame,
            text="‚úì –ó—Ä–æ–∑—É–º—ñ–ª–æ",
            font=('Arial', 14, 'bold'),
            bg='#00ff88',
            fg='#1a2a2e',
            activebackground='#00cc6f',
            relief=tk.FLAT,
            padx=40,
            pady=12,
            cursor='hand2',
            command=about_window.destroy
        )
        close_btn.pack(pady=(20, 0))
    
    def start_game(self):
        """–ó–∞–∫—Ä–∏–≤–∞—î –º–µ–Ω—é —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î –≥—Ä—É"""
        # –ó—É–ø–∏–Ω—è—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é
        self.stop_animation()
        
        # –û—á–∏—â–∞—î–º–æ –≤—ñ–∫–Ω–æ
        for widget in self.root.winfo_children():
            widget.destroy()
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥—Ä—É –∑ –≤–∏–±—Ä–∞–Ω–∏–º —Ä–æ–∑–º—ñ—Ä–æ–º —Ç–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—é
        game = BattleshipGame(self.root, self.selected_board_size, self.difficulty)


class BattleshipGame:
    """–ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –≥—Ä–∏ –ú–æ—Ä—Å—å–∫–∏–π –±—ñ–π –∑ GUI"""
    
    def __init__(self, root, board_size: int = 10, difficulty: str = "easy"):
        self.root = root
        self.root.title("–ú–æ—Ä—Å—å–∫–∏–π –±—ñ–π")
        self.root.resizable(True, True)
        self.root.configure(bg='#1a1a2e')
        
        self.board_size = board_size
        self.difficulty = difficulty  # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
        
        # –†–æ–∑–º—ñ—Ä –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–ª—è
        if board_size == 6:
            self.cell_size = 60
            self.root.minsize(900, 700)
        elif board_size == 10:
            self.cell_size = 40
            self.root.minsize(1000, 800)
        else:  # 14
            self.cell_size = 35
            self.root.minsize(1100, 850)
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–æ—Ä–∞–±–ª—ñ–≤ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–ª—è
        self.ship_sizes = self.get_ship_configuration(board_size)
        
        # –Ü–≥—Ä–æ–≤—ñ –ø–æ–ª—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é –∫–æ—Ä–∞–±–ª—ñ–≤
        self.player_board = Board(self.board_size, self.ship_sizes)
        self.computer_board = Board(self.board_size, self.ship_sizes)
        
        # –°—Ç–∞–Ω –≥—Ä–∏: setup (—Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è), playing (–≥—Ä–∞), ended (–∑–∞–≤–µ—Ä—à–µ–Ω–æ)
        self.game_phase = "setup"
        self.current_ship_index = 0
        self.current_orientation = Orientation.HORIZONTAL
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∏
        self.player_score = 0      # –í–ª—É—á–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—è
        self.computer_score = 0    # –í–ª—É—á–∞–Ω–Ω—è –∫–æ–º–ø'—é—Ç–µ—Ä–∞
        self.player_shots = 0      # –í—Å—å–æ–≥–æ –ø–æ—Å—Ç—Ä—ñ–ª—ñ–≤ –≥—Ä–∞–≤—Ü—è
        self.computer_shots = 0    # –í—Å—å–æ–≥–æ –ø–æ—Å—Ç—Ä—ñ–ª—ñ–≤ –∫–æ–º–ø'—é—Ç–µ—Ä–∞

        # –ª—ñ—á–∏–ª—å–Ω–∏–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –º—ñ–Ω –≥—Ä–∞–≤—Ü–µ–º
        self.player_mines_used = []

        # –ó–º—ñ–Ω–Ω—ñ –¥–ª—è —Ä–æ–∑—É–º–Ω–æ–≥–æ –®–Ü
        self.ai_mode = "hunt"           # –†–µ–∂–∏–º: hunt (–ø–æ—à—É–∫) –∞–±–æ target (–¥–æ–±–∏–≤–∞–Ω–Ω—è)
        self.ai_target_queue = []       # –ß–µ—Ä–≥–∞ –∫–ª—ñ—Ç–∏–Ω–æ–∫ –¥–ª—è –∞—Ç–∞–∫–∏ –ø—ñ—Å–ª—è –≤–ª—É—á–∞–Ω–Ω—è
        self.ai_last_hit = None         # –û—Å—Ç–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–∞ –∞—Ç–∞–∫–∞
        self.ai_hit_direction = None    # –ù–∞–ø—Ä—è–º–æ–∫ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö –≤–ª—É—á–∞–Ω—å
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫—Ä–∞–∫–µ–Ω–∞ (None –Ω–∞ –ø–æ—á–∞—Ç–∫—É, —Å—Ç–≤–æ—Ä–∏–º–æ –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É –≥—Ä–∏)
        self.kraken = None
        self.kraken_container = None

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ AI-–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –∑–≥—ñ–¥–Ω–æ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
        if self.difficulty == "easy":
            self.ai_controller = EasyAIController(self.player_board)
        else:
            self.ai_controller = HardAIController(self.player_board)
        
        self.setup_ui()
        self.center_window()
    
    def get_ship_configuration(self, board_size: int) -> List[int]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∫–æ—Ä–∞–±–ª—ñ–≤ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–ª—è"""
        if board_size == 6:
            # –ú–∞–ª–µ–Ω—å–∫–µ –ø–æ–ª–µ: 5 –∫–æ—Ä–∞–±–ª—ñ–≤
            # 1 –∫—Ä–µ–π—Å–µ—Ä (3), 1 –µ—Å–º—ñ–Ω–µ—Ü—å (2), 3 –∫–∞—Ç–µ—Ä–∏ (1)
            return [3, 2, 1, 1, 1]
        elif board_size == 10:
            # –ù–æ—Ä–º–∞–ª—å–Ω–µ –ø–æ–ª–µ: 10 –∫–æ—Ä–∞–±–ª—ñ–≤ (–∫–ª–∞—Å–∏—á–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è)
            # 1 –ª—ñ–Ω–∫–æ—Ä (4), 2 –∫—Ä–µ–π—Å–µ—Ä–∏ (3), 3 –µ—Å–º—ñ–Ω—Ü—ñ (2), 4 –∫–∞—Ç–µ—Ä–∏ (1)
            return [4, 3, 3, 2, 2, 2, 1, 1, 1, 1]
        else:  # 14
            # –í–µ–ª–∏–∫–µ –ø–æ–ª–µ: 15 –∫–æ—Ä–∞–±–ª—ñ–≤
            # 1 –∞–≤—ñ–∞–Ω–æ—Å–µ—Ü—å (5), 2 –ª—ñ–Ω–∫–æ—Ä–∏ (4), 3 –∫—Ä–µ–π—Å–µ—Ä–∏ (3), 4 –µ—Å–º—ñ–Ω—Ü—ñ (2), 5 –∫–∞—Ç–µ—Ä—ñ–≤ (1)
            return [5, 4, 4, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1]
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä—É—î –≤—ñ–∫–Ω–æ –≥—Ä–∏ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ –∑ –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–º —Ä–æ–∑–º—ñ—Ä–æ–º"""
        self.root.update_idletasks()
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–ª—è
        board_width = self.cell_size * self.board_size
        window_width = board_width * 2 + 200  # –î–≤–∞ –ø–æ–ª—è + –≤—ñ–¥—Å—Ç—É–ø–∏
        window_height = board_width + 320     # –í–∏—Å–æ—Ç–∞ –ø–æ–ª—è + –µ–ª–µ–º–µ–Ω—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –µ–∫—Ä–∞–Ω—É
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        
        # –ê–¥–∞–ø—Ç–∞—Ü—ñ—è –ø—ñ–¥ —Ä–æ–∑–º—ñ—Ä –µ–∫—Ä–∞–Ω—É
        if window_width > screen_width * 0.95:
            window_width = int(screen_width * 0.95)
        if window_height > screen_height * 0.9:
            window_height = int(screen_height * 0.9)
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ç–∞ –ø–æ–∑–∏—Ü—ñ—é –≤—ñ–∫–Ω–∞
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
    def setup_ui(self):
        """–°—Ç–≤–æ—Ä—é—î –≤–µ—Å—å –≥—Ä–∞—Ñ—ñ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥—Ä–∏"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∏
        title_frame = tk.Frame(self.root, bg='#1a1a2e')
        title_frame.pack(pady=20)
        
        title_label = tk.Label(
            title_frame,
            text="üö¢ –ú–û–†–°–¨–ö–ò–ô –ë–Ü–ô üö¢",
            font=('Arial', 28, 'bold'),
            fg='#00d4ff',
            bg='#1a1a2e'
        )
        title_label.pack()
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –ø–∞–Ω–µ–ª—å (–ø—ñ–¥–∫–∞–∑–∫–∏ –¥–ª—è –≥—Ä–∞–≤—Ü—è)
        self.info_label = tk.Label(
            self.root,
            text="–†–æ–∑–º—ñ—â—É–π—Ç–µ –∫–æ—Ä–∞–±–ª—ñ –Ω–∞ —Å–≤–æ—î–º—É –ø–æ–ª—ñ",
            font=('Arial', 14),
            fg='#ffffff',
            bg='#1a1a2e'
        )
        self.info_label.pack(pady=10)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–±–æ—Ö —ñ–≥—Ä–æ–≤–∏—Ö –ø–æ–ª—ñ–≤ –¢–ê –ö–†–ê–ö–ï–ù–ê
        boards_frame = tk.Frame(self.root, bg='#1a1a2e')
        boards_frame.pack(pady=10)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ boards_frame –¥–ª—è –∫—Ä–∞–∫–µ–Ω–∞
        self.boards_frame = boards_frame

        # –ü–æ–ª–µ –≥—Ä–∞–≤—Ü—è (–ª—ñ–≤–æ—Ä—É—á)
        player_container = tk.Frame(boards_frame, bg='#1a1a2e')
        player_container.pack(side=tk.LEFT, padx=20)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫—Ä–∞–∫–µ–Ω–∞ –º—ñ–∂ –ø–æ–ª—è–º–∏
        if self.board_size >= 10:
            kraken_height = self.cell_size * self.board_size + 1
            self.kraken_container = tk.Frame(
                boards_frame,
                bg='#1a1a2e',
                width=360,
                height=kraken_height
            )
            self.kraken_container.pack(side=tk.LEFT, padx=10)
            self.kraken_container.pack_propagate(False)
        else:
            self.kraken_container = None
        
        player_title = tk.Label(
            player_container,
            text="–í–∞—à–µ –ø–æ–ª–µ",
            font=('Arial', 16, 'bold'),
            fg='#00ff88',
            bg='#1a1a2e'
        )
        player_title.pack(pady=5)
        
        self.player_canvas = tk.Canvas(
            player_container,
            width=self.cell_size * self.board_size + 1,
            height=self.cell_size * self.board_size + 1,
            bg='#0f3460',
            highlightthickness=2,
            highlightbackground='#00d4ff'
        )
        self.player_canvas.pack()
        # –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—ñ–≤
        self.player_canvas.bind('<Button-1>', self.on_player_board_click)
        self.player_canvas.bind('<Motion>', self.on_player_board_hover)
        
        # –ü–æ–ª–µ –∫–æ–º–ø'—é—Ç–µ—Ä–∞ (–ø—Ä–∞–≤–æ—Ä—É—á)
        computer_container = tk.Frame(boards_frame, bg='#1a1a2e')
        computer_container.pack(side=tk.LEFT, padx=20)
        
        computer_title = tk.Label(
            computer_container,
            text="–ü–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞",
            font=('Arial', 16, 'bold'),
            fg='#ff4444',
            bg='#1a1a2e'
        )
        computer_title.pack(pady=5)
        
        self.computer_canvas = tk.Canvas(
            computer_container,
            width=self.cell_size * self.board_size + 1,
            height=self.cell_size * self.board_size + 1,
            bg='#0f3460',
            highlightthickness=2,
            highlightbackground='#ff4444'
        )
        self.computer_canvas.pack()
        # –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—ñ–≤ –¥–ª—è –∞—Ç–∞–∫–∏
        self.computer_canvas.bind('<Button-1>', self.on_computer_board_click)
        
        # –ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        control_frame = tk.Frame(self.root, bg='#1a1a2e')
        control_frame.pack(pady=20)
        
        self.rotate_button = tk.Button(
            control_frame,
            text="üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –∫–æ—Ä–∞–±–µ–ª—å",
            font=('Arial', 12, 'bold'),
            bg='#00d4ff',
            fg='#1a2a2e',
            activebackground='#00a8cc',
            relief=tk.FLAT,
            padx=20,
            pady=10,
            command=self.rotate_ship
        )
        self.rotate_button.pack(side=tk.LEFT, padx=5)
        
        self.random_button = tk.Button(
            control_frame,
            text="üé≤ –í–∏–ø–∞–¥–∫–æ–≤–æ",
            font=('Arial', 12, 'bold'),
            bg='#00ff88',
            fg='#1a2a2e',
            activebackground='#00cc6f',
            relief=tk.FLAT,
            padx=20,
            pady=10,
            command=self.place_ships_randomly
        )
        self.random_button.pack(side=tk.LEFT, padx=5)
        
        self.reset_button = tk.Button(
            control_frame,
            text="üîÑ –ù–æ–≤–∞ –≥—Ä–∞",
            font=('Arial', 12, 'bold'),
            bg='#ff8800',
            fg='#1a2a2e',
            activebackground='#cc6600',
            relief=tk.FLAT,
            padx=20,
            pady=10,
            command=self.reset_game
        )
        self.reset_button.pack(side=tk.LEFT, padx=5)
        
        self.menu_button = tk.Button(
            control_frame,
            text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
            font=('Arial', 12, 'bold'),
            bg='#9b59b6',
            fg='#ffffff',
            activebackground='#8e44ad',
            relief=tk.FLAT,
            padx=20,
            pady=10,
            command=self.return_to_menu
        )
        self.menu_button.pack(side=tk.LEFT, padx=5)

        self.rockets_manager = RocketsManager(
            game=self,
            player_canvas=self.player_canvas,
            computer_canvas=self.computer_canvas,
            board_size=self.board_size,
            root=self.root
        )
        self.rockets_manager.create_rocket_controls(control_frame)
        
        # –ü–∞–Ω–µ–ª—å —Ä–∞—Ö—É–Ω–∫—É
        score_frame = tk.Frame(self.root, bg='#1a1a2e')
        score_frame.pack(pady=10)
        
        self.score_label = tk.Label(
            score_frame,
            text="–ü–æ–ø–∞–¥–∞–Ω—å –≥—Ä–∞–≤—Ü—è: 0 | –ü–æ–ø–∞–¥–∞–Ω—å –∫–æ–º–ø'—é—Ç–µ—Ä–∞: 0",
            font=('Arial', 12),
            fg='#ffffff',
            bg='#1a1a2e'
        )
        self.score_label.pack()
        
        self.draw_boards()
        
    def draw_boards(self):
        self.draw_board(self.player_canvas, self.player_board, show_ships=True)
        self.draw_board(self.computer_canvas, self.computer_board, show_ships=False)
        
    def draw_board(self, canvas: tk.Canvas, board: Board, show_ships: bool):
        """–ú–∞–ª—é—î —ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ –Ω–∞ canvas
        show_ships - —á–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –∫–æ—Ä–∞–±–ª—ñ (True –¥–ª—è —Å–≤–æ–≥–æ –ø–æ–ª—è, False –¥–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞)"""
        canvas.delete('all')
        
        # –ú–∞–ª—é—î–º–æ —Å—ñ—Ç–∫—É –ø–æ–ª—è
        for i in range(self.board_size + 1):
            # Vertical lines
            canvas.create_line(
                i * self.cell_size, 0,
                i * self.cell_size, self.board_size * self.cell_size,
                fill='#16213e', width=1
            )
            # Horizontal lines
            canvas.create_line(
                0, i * self.cell_size,
                self.board_size * self.cell_size, i * self.cell_size,
                fill='#16213e', width=1
            )
        
        # –ú–∞–ª—é—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º–∏ –∫–æ–ª—å–æ—Ä–∞–º–∏ —Ç–∞ —Å–∏–º–≤–æ–ª–∞–º–∏
        for y in range(self.board_size):
            for x in range(self.board_size):
                cell_state = board.grid[y][x]
                is_revealed = board.revealed[y][x]
                
                x1 = x * self.cell_size
                y1 = y * self.cell_size
                x2 = x1 + self.cell_size
                y2 = y1 + self.cell_size
                
                if cell_state == CellState.HIT:
                    canvas.create_rectangle(x1, y1, x2, y2, fill='#ff4444', outline='#16213e')
                    canvas.create_text(
                        x1 + self.cell_size // 2,
                        y1 + self.cell_size // 2,
                        text='üí•',
                        font=('Arial', 16)
                    )
                elif cell_state == CellState.MISS:
                    canvas.create_rectangle(x1, y1, x2, y2, fill='#4a5568', outline='#16213e')
                    canvas.create_text(
                        x1 + self.cell_size // 2,
                        y1 + self.cell_size // 2,
                        text='‚óã',
                        font=('Arial', 16),
                        fill='#ffffff'
                    )
                elif cell_state == CellState.SHIP and show_ships:
                    canvas.create_rectangle(x1, y1, x2, y2, fill='#00ff88', outline='#16213e')
                else:
                    canvas.create_rectangle(x1, y1, x2, y2, fill='#0f3460', outline='#16213e')
        if canvas == self.player_canvas and show_ships and hasattr(self, "rockets_manager"):
            self.rockets_manager.draw_rockets_on_player_canvas()

    
    def on_player_board_click(self, event):
        """–û–±—Ä–æ–±–ª—è—î –∫–ª—ñ–∫ –ø–æ –ø–æ–ª—ñ –≥—Ä–∞–≤—Ü—è –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—ñ–≤"""
        if self.game_phase != "setup":
            return

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –º–∏—à—ñ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Å—ñ—Ç–∫–∏
        x = event.x // self.cell_size
        y = event.y // self.cell_size

        # –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—ñ–≤
        if self.current_ship_index < len(self.ship_sizes):
                ship_size = self.ship_sizes[self.current_ship_index]

        if self.player_board.place_ship(ship_size, x, y, self.current_orientation):
            self.current_ship_index += 1

            # –Ø–∫—â–æ –≤—Å—ñ –∫–æ—Ä–∞–±–ª—ñ —Ä–æ–∑–º—ñ—â–µ–Ω—ñ ‚Äî –ø–æ—á–∏–Ω–∞—î–º–æ –≥—Ä—É
            if self.current_ship_index >= len(self.ship_sizes):
                self.start_game()
            else:
                self.update_info_label()

            self.draw_boards()
        else:
            messagebox.showwarning("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∞–±–µ–ª—å —Ç—É—Ç!")
    
    def on_player_board_hover(self, event):
        """–ü–æ–∫–∞–∑—É—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ –º–∏—à—ñ"""
        if self.game_phase != "setup" or self.current_ship_index >= len(self.ship_sizes):
            return
        
        x = event.x // self.cell_size
        y = event.y // self.cell_size
        
        # –ü–µ—Ä–µ–º–∞–ª—å–æ–≤—É—î–º–æ –ø–æ–ª–µ
        self.draw_board(self.player_canvas, self.player_board, show_ships=True)
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ (–∑–µ–ª–µ–Ω–∏–π - –º–æ–∂–Ω–∞, —á–µ—Ä–≤–æ–Ω–∏–π - –Ω–µ –º–æ–∂–Ω–∞)
        ship_size = self.ship_sizes[self.current_ship_index]
        can_place = self.player_board.can_place_ship(ship_size, x, y, self.current_orientation)
        color = '#88ff88' if can_place else '#ff8888'
        
        for i in range(ship_size):
            if self.current_orientation == Orientation.HORIZONTAL:
                px, py = x + i, y
            else:
                px, py = x, y + i
            
            if 0 <= px < self.board_size and 0 <= py < self.board_size:
                x1 = px * self.cell_size
                y1 = py * self.cell_size
                x2 = x1 + self.cell_size
                y2 = y1 + self.cell_size
                self.player_canvas.create_rectangle(
                    x1, y1, x2, y2,
                    fill=color,
                    outline='#ffffff',
                    stipple='gray50'
                )
    
    def on_computer_board_click(self, event):
        """–û–±—Ä–æ–±–ª—è—î –∫–ª—ñ–∫ –ø–æ –ø–æ–ª—ñ –∫–æ–º–ø'—é—Ç–µ—Ä–∞ (—Å—Ç—Ä—ñ–ª—å–±–∞ —Ç–∞ —Ä–∞–∫–µ—Ç–∏)"""
        if self.game_phase != "playing":
            return

        x = event.x // self.cell_size
        y = event.y // self.cell_size

        # üöÄ –Ø–∫—â–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π —Ä–µ–∂–∏–º —Ä–∞–∫–µ—Ç–∏
        if hasattr(self, "rockets_manager") and self.rockets_manager.mode == "throw":
            hit_any, coords = self.rockets_manager.throw_rocket_at("computer", x, y)
            self.draw_boards()
            self.update_score()
            self.rockets_manager.cancel_throw_mode()
            self.rockets_manager._update_rockets_label()

            if hit_any:
                self.info_label.config(text="üöÄ –†–∞–∫–µ—Ç–∞ –≤–ª—É—á–∏–ª–∞! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ —Ö—ñ–¥!")
            else:
                self.info_label.config(text="üí® –†–∞–∫–µ—Ç–∞ –Ω–µ –≤–ª—É—á–∏–ª–∞. –•—ñ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...")
                self.root.after(600, self.computer_turn)
            return

        # üî´ –ó–≤–∏—á–∞–π–Ω–∏–π –ø–æ—Å—Ç—Ä—ñ–ª
        if not (0 <= x < self.board_size and 0 <= y < self.board_size):
            return
        if self.computer_board.revealed[y][x]:
            return

        self.player_shots += 1
        hit, sunk, ship = self.computer_board.attack(x, y)

        if hit:
            self.player_score += 1
            if sunk:
                messagebox.showinfo("–í–ª—É—á–Ω–æ!", "–í–∏ –ø–æ—Ç–æ–ø–∏–ª–∏ –∫–æ—Ä–∞–±–µ–ª—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞! üéâ")
            else:
                self.info_label.config(text="–í–ª—É—á–Ω–æ! –°—Ç—Ä—ñ–ª—è–π—Ç–µ —â–µ —Ä–∞–∑! üéØ")
        else:
            self.info_label.config(text="–ü—Ä–æ–º–∞—Ö! –•—ñ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...")
            self.root.after(500, self.computer_turn)

        self.draw_boards()
        self.update_score()

        if self.computer_board.all_ships_sunk():
            self.end_game(True)
    
    def computer_turn(self):
        """–•—ñ–¥ –∫–æ–º–ø'—é—Ç–µ—Ä–∞ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —Ä–æ–∑—É–º–Ω–æ–≥–æ –®–Ü"""
        if self.game_phase != "playing":
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –∞—Ç–∞–∫–∏ –≤—ñ–¥ –®–Ü
        x, y = self.get_ai_move()
        
        if x is None or y is None:
            return
        
        self.computer_shots += 1
        hit, sunk, ship = self.player_board.attack(x, y)
        
        if hit:
            self.computer_score += 1
            self.ai_last_hit = (x, y)
            
            if not sunk:
                # –í–ª—É—á–∞–Ω–Ω—è: –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Ä–µ–∂–∏–º –¥–æ–±–∏–≤–∞–Ω–Ω—è, –¥–æ–¥–∞—î–º–æ —Å—É—Å—ñ–¥–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏
                self.ai_mode = "target"
                self.add_adjacent_targets(x, y)
                self.info_label.config(text="–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–ª—É—á–∏–≤! –í—ñ–Ω —Å—Ç—Ä—ñ–ª—è—î –∑–Ω–æ–≤—É...")
                self.root.after(1000, self.computer_turn)
            else:
                # –ö–æ—Ä–∞–±–µ–ª—å –ø–æ—Ç–æ–ø–ª–µ–Ω–∏–π: –æ—á–∏—â–∞—î–º–æ —Ü—ñ–ª—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Ä–µ–∂–∏–º—É –ø–æ—à—É–∫—É
                self.clean_target_queue_around_ship(ship)
                self.ai_mode = "hunt"
                self.ai_target_queue.clear()
                self.ai_last_hit = None
                self.ai_hit_direction = None
                self.info_label.config(text="–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø–æ—Ç–æ–ø–∏–≤ –≤–∞—à –∫–æ—Ä–∞–±–µ–ª—å! üíî")
                self.root.after(1000, self.computer_turn)
        else:
            self.ai_mode = "hunt" if not self.ai_target_queue else "target"
            self.info_label.config(text="–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–æ–º–∞—Ö–Ω—É–≤—Å—è! –í–∞—à —Ö—ñ–¥! üéØ")

        # AI –º–æ–∂–µ –∫–∏–Ω—É—Ç–∏ —Ä–∞–∫–µ—Ç—É
        if hasattr(self, "rockets_manager"):
            thrown = self.rockets_manager.ai_maybe_throw()
            if thrown:
                self.draw_boards()
                self.update_score()
                if not self.player_board.all_ships_sunk():
                    self.root.after(600, self.computer_turn)

        self.draw_boards()
        self.update_score()
        
        if self.player_board.all_ships_sunk():
            self.end_game(False)
    
    def get_ai_move(self) -> Tuple[Optional[int], Optional[int]]:
        """–†–æ–∑—É–º–Ω–µ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ä—ñ—à–µ–Ω—å –®–Ü –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω—É –∞—Ç–∞–∫—É
        –î–ª—è EASY ‚Äî –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–ø–∞–¥–∫–æ–≤–æ (–±–µ–∑ –¥–æ–±–∏–≤–∞–Ω–Ω—è).
        –î–ª—è HARD ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ä–µ–∂–∏–º 'hunt' —ñ 'target' (—ñ—Å–Ω—É—é—á–∞ –ª–æ–≥—ñ–∫–∞)."""
        # EASY: –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–ø–∞–¥–∫–æ–≤–∞ –∞—Ç–∞–∫–∞ –ø–æ –±—É–¥—å-—è–∫—ñ–π –Ω–µ–≤—ñ–¥–∫—Ä–∏—Ç—ñ–π –∫–ª—ñ—Ç–∏–Ω—ñ
        if getattr(self, "difficulty", "easy") == "easy":
            choices = [
                (x, y)
                for y in range(self.board_size)
                for x in range(self.board_size)
                if not self.player_board.revealed[y][x]
            ]
            if not choices:
                return None, None
            return random.choice(choices)

        # HARD: –†–µ–∂–∏–º –¥–æ–±–∏–≤–∞–Ω–Ω—è: –∞—Ç–∞–∫—É—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –ø–æ—Ä—É—á –∑ –≤–ª—É—á–∞–Ω–Ω—è–º–∏
        if self.ai_mode == "target" and self.ai_target_queue:
            while self.ai_target_queue:
                x, y = self.ai_target_queue.pop(0)
                if 0 <= x < self.board_size and 0 <= y < self.board_size:
                    if not self.player_board.revealed[y][x]:
                        return x, y
            # –Ø–∫—â–æ —á–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Ä–µ–∂–∏–º—É –ø–æ—à—É–∫—É
            self.ai_mode = "hunt"
        
        # –†–µ–∂–∏–º –ø–æ—à—É–∫—É: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —à–∞—Ö–æ–≤—É –º–æ–¥–µ–ª—å –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        max_attempts = self.board_size * 20
        attempts = 0
        
        while attempts < max_attempts:
            x = random.randint(0, self.board_size - 1)
            y = random.randint(0, self.board_size - 1)
            
            if not self.player_board.revealed[y][x]:
                if (x + y) % 2 == 0 or attempts > max_attempts // 2:
                    return x, y
            
            attempts += 1
        
        # –§–æ–ª–±–µ–∫ ‚Äî –ø–µ—Ä—à–∞ –Ω–µ–≤—ñ–¥–∫—Ä–∏—Ç–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞
        for y in range(self.board_size):
            for x in range(self.board_size):
                if not self.player_board.revealed[y][x]:
                    return x, y
        
        return None, None
    
    def add_adjacent_targets(self, x: int, y: int):
        """–î–æ–¥–∞—î —Å—É—Å—ñ–¥–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–æ —á–µ—Ä–≥–∏ —Ü—ñ–ª–µ–π –ø—ñ—Å–ª—è –≤–ª—É—á–∞–Ω–Ω—è
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î 4 –Ω–∞–ø—Ä—è–º–∫–∏: –≤–ø—Ä–∞–≤–æ, –≤–Ω–∏–∑, –≤–ª—ñ–≤–æ, –≤–≥–æ—Ä—É"""
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < self.board_size and 0 <= ny < self.board_size:
                if not self.player_board.revealed[ny][nx]:
                    if (nx, ny) not in self.ai_target_queue:
                        self.ai_target_queue.append((nx, ny))
    
    def clean_target_queue_around_ship(self, ship: Optional[Ship]):
        """–í–∏–¥–∞–ª—è—î –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞–≤–∫–æ–ª–æ –ø–æ—Ç–æ–ø–ª–µ–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –∑ —á–µ—Ä–≥–∏ —Ü—ñ–ª–µ–π
        –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± –®–Ü –Ω–µ –Ω–∞–º–∞–≥–∞–≤—Å—è —Å—Ç—Ä—ñ–ª—è—Ç–∏ –ø–æ –Ω–µ–º–æ–∂–ª–∏–≤–∏—Ö –ø–æ–∑–∏—Ü—ñ—è—Ö"""
        if ship is None:
            return
        
        ship_coords = ship.get_coordinates()
        cells_to_remove = set()
        
        # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞–≤–∫–æ–ª–æ –∫–æ—Ä–∞–±–ª—è
        for sx, sy in ship_coords:
            for dx in range(-1, 2):
                for dy in range(-1, 2):
                    nx, ny = sx + dx, sy + dy
                    cells_to_remove.add((nx, ny))
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —á–µ—Ä–≥—É, –≤–∏–¥–∞–ª—è—é—á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞–≤–∫–æ–ª–æ –ø–æ—Ç–æ–ø–ª–µ–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
        self.ai_target_queue = [(x, y) for x, y in self.ai_target_queue if (x, y) not in cells_to_remove]
    
    def rotate_ship(self):
        if self.game_phase == "setup":
            self.current_orientation = (
                Orientation.VERTICAL if self.current_orientation == Orientation.HORIZONTAL
                else Orientation.HORIZONTAL
            )
    
    def place_ships_randomly(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–º—ñ—â—É—î –≤—Å—ñ –∫–æ—Ä–∞–±–ª—ñ –≥—Ä–∞–≤—Ü—è —É –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –ø–æ–∑–∏—Ü—ñ—è—Ö"""
        if self.game_phase == "setup":
            self.player_board = Board(self.board_size, self.ship_sizes)
            self.player_board.place_ships_randomly()
            self.current_ship_index = len(self.ship_sizes)
            self.draw_boards()
            self.start_game()
    
    def start_game(self):
        """–ü–æ—á–∏–Ω–∞—î –≥—Ä—É –ø—ñ—Å–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∞–±–ª—ñ–≤"""
        self.game_phase = "playing"
        # –†–æ–∑–º—ñ—â—É—î–º–æ –∫–æ—Ä–∞–±–ª—ñ –∫–æ–º–ø'—é—Ç–µ—Ä–∞
        self.computer_board.place_ships_randomly()

        if hasattr(self, "rockets_manager"):
            self.rockets_manager.place_computer_rockets_random()
            self.rockets_manager._update_rockets_label()
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫—Ä–∞–∫–µ–Ω–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å–µ—Ä–µ–¥–Ω—ñ—Ö —Ç–∞ –≤–µ–ª–∏–∫–∏—Ö –ø–æ–ª—ñ–≤)
        if self.board_size >= 10:
            # –ó–Ω–∏—â—É—î–º–æ —Å—Ç–∞—Ä–æ–≥–æ –∫—Ä–∞–∫–µ–Ω–∞, —è–∫—â–æ —ñ—Å–Ω—É—î
            if self.kraken:
                self.kraken.destroy()

            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫—Ä–∞–∫–µ–Ω–∞ –º—ñ–∂ –ø–æ–ª—è–º–∏
            parent = self.kraken_container if self.kraken_container else self.boards_frame
            self.kraken = Kraken(
                parent,
                self.board_size,
                self.player_board,
                self.computer_board,
                self.on_kraken_attack
            )
        self.info_label.config(text="–ì—Ä–∞ –ø–æ—á–∞–ª–∞—Å—è! –°—Ç—Ä—ñ–ª—è–π—Ç–µ –ø–æ –ø–æ–ª—é –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞! üéØ")
        # –í–∏–º–∏–∫–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
        self.rotate_button.config(state=tk.DISABLED)
        self.random_button.config(state=tk.DISABLED)
        self.draw_boards()
        if hasattr(self, "rockets_manager"):
            self.rockets_manager._update_rockets_label()

    
    def on_kraken_attack(self, board_name: str, x: int, y: int, attack_size: int):
        """–û–±—Ä–æ–±–ª—è—î –∞—Ç–∞–∫—É –∫—Ä–∞–∫–µ–Ω–∞ —Ç–∞ –æ–Ω–æ–≤–ª—é—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        # –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–ª—ñ–≤
        self.draw_boards()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if attack_size == 1:
            attack_text = f"–∫–ª—ñ—Ç–∏–Ω–∫—É ({x}, {y})"
        else:
            attack_text = f"–æ–±–ª–∞—Å—Ç—å {attack_size}x{attack_size} –≤—ñ–¥ ({x}, {y})"
        
        self.info_label.config(
            text=f"üêô –ö–†–ê–ö–ï–ù –ê–¢–ê–ö–£–í–ê–í –ø–æ–ª–µ {board_name}: {attack_text}! üí•",
            fg='#ff0000'
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å –≥—Ä–∞
        if self.player_board.all_ships_sunk():
            self.end_game(False)
        elif self.computer_board.all_ships_sunk():
            self.end_game(True)
        else:
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π –∫–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
            self.root.after(3000, lambda: self.info_label.config(fg='#ffffff'))
    
    def end_game(self, player_won: bool):
        """–ó–∞–≤–µ—Ä—à—É—î –≥—Ä—É —Ç–∞ –ø–æ–∫–∞–∑—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏"""
        self.game_phase = "ended"
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –∫–æ—Ä–∞–±–ª—ñ –∫–æ–º–ø'—é—Ç–µ—Ä–∞
        self.draw_board(self.computer_canvas, self.computer_board, show_ships=True)
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        player_accuracy = (self.player_score / self.player_shots * 100) if self.player_shots > 0 else 0
        computer_accuracy = (self.computer_score / self.computer_shots * 100) if self.computer_shots > 0 else 0
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–∞—Å—Ç–æ–º–Ω–µ –≤—ñ–∫–Ω–æ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        self.show_game_over_window(player_won, player_accuracy, computer_accuracy)
    
    def show_game_over_window(self, player_won: bool, player_accuracy: float, computer_accuracy: float):
        """–ü–æ–∫–∞–∑—É—î –∫–∞—Å—Ç–æ–º–Ω–µ –≤—ñ–∫–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é"""
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        game_over_window = tk.Toplevel(self.root)
        game_over_window.title("–ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        game_over_window.configure(bg='#1a1a2e')
        game_over_window.resizable(False, False)
        game_over_window.grab_set()
        
        # –¶–µ–Ω—Ç—Ä—É—î–º–æ –≤—ñ–∫–Ω–æ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ
        window_width = 500
        window_height = 550
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        game_over_window.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏
        main_frame = tk.Frame(game_over_window, bg='#1a1a2e', padx=30, pady=30)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        result_emoji = "üèÜ" if player_won else "üíî"
        result_text = "–ü–ï–†–ï–ú–û–ì–ê!" if player_won else "–ü–û–†–ê–ó–ö–ê"
        result_color = '#00ff88' if player_won else '#ff4444'
        
        title_label = tk.Label(
            main_frame,
            text=f"{result_emoji} {result_text} {result_emoji}",
            font=('Arial', 32, 'bold'),
            fg=result_color,
            bg='#1a1a2e'
        )
        title_label.pack(pady=(0, 10))
        
        # Subtitle
        subtitle_text = "–í—ñ—Ç–∞—î–º–æ! –í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏!" if player_won else "–ö–æ–º–ø'—é—Ç–µ—Ä –ø–µ—Ä–µ–º—ñ–≥ —Ü—å–æ–≥–æ —Ä–∞–∑—É..."
        subtitle_label = tk.Label(
            main_frame,
            text=subtitle_text,
            font=('Arial', 14),
            fg='#ffffff',
            bg='#1a1a2e'
        )
        subtitle_label.pack(pady=(0, 20))
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_frame = tk.Frame(main_frame, bg='#0f3460', relief=tk.RAISED, bd=2)
        stats_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # Stats title
        stats_title = tk.Label(
            stats_frame,
            text="üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–†–ò",
            font=('Arial', 18, 'bold'),
            fg='#00d4ff',
            bg='#0f3460',
            pady=15
        )
        stats_title.pack()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è
        player_frame = tk.Frame(stats_frame, bg='#0f3460', pady=10)
        player_frame.pack(fill=tk.X, padx=20)
        
        player_title = tk.Label(
            player_frame,
            text="üë§ –ì–†–ê–í–ï–¶–¨",
            font=('Arial', 14, 'bold'),
            fg='#00ff88',
            bg='#0f3460',
            anchor='w'
        )
        player_title.pack(anchor='w', pady=(0, 5))
        
        player_stats = [
            f"–ü–æ—Å—Ç—Ä—ñ–ª—ñ–≤: {self.player_shots}",
            f"–í–ª—É—á–∞–Ω—å: {self.player_score}",
            f"–¢–æ—á–Ω—ñ—Å—Ç—å: {player_accuracy:.1f}%"
        ]
        
        for stat in player_stats:
            stat_label = tk.Label(
                player_frame,
                text=f"  ‚Ä¢ {stat}",
                font=('Arial', 12),
                fg='#ffffff',
                bg='#0f3460',
                anchor='w'
            )
            stat_label.pack(anchor='w', pady=2)
        
        # –†–æ–∑–¥—ñ–ª—å–Ω–∏–∫
        divider = tk.Frame(stats_frame, bg='#16213e', height=2)
        divider.pack(fill=tk.X, padx=20, pady=10)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–ø'—é—Ç–µ—Ä–∞
        computer_frame = tk.Frame(stats_frame, bg='#0f3460', pady=10)
        computer_frame.pack(fill=tk.X, padx=20)
        
        computer_title = tk.Label(
            computer_frame,
            text="ü§ñ –ö–û–ú–ü'–Æ–¢–ï–†",
            font=('Arial', 14, 'bold'),
            fg='#ff4444',
            bg='#0f3460',
            anchor='w'
        )
        computer_title.pack(anchor='w', pady=(0, 5))
        
        computer_stats = [
            f"–ü–æ—Å—Ç—Ä—ñ–ª—ñ–≤: {self.computer_shots}",
            f"–í–ª—É—á–∞–Ω—å: {self.computer_score}",
            f"–¢–æ—á–Ω—ñ—Å—Ç—å: {computer_accuracy:.1f}%"
        ]
        
        for stat in computer_stats:
            stat_label = tk.Label(
                computer_frame,
                text=f"  ‚Ä¢ {stat}",
                font=('Arial', 12),
                fg='#ffffff',
                bg='#0f3460',
                anchor='w'
            )
            stat_label.pack(anchor='w', pady=2)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        if player_won:
            achievement_text = "‚≠ê –í—ñ–¥–º—ñ–Ω–Ω–∞ –≥—Ä–∞! –í–∏ - —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –∞–¥–º—ñ—Ä–∞–ª!" if player_accuracy >= 50 else "‚ú® –ì–∞—Ä–Ω–∞ –≥—Ä–∞! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏—Å—å!"
            achievement_color = '#ffd700' if player_accuracy >= 50 else '#00d4ff'
        else:
            achievement_text = "üí™ –ù–µ –∑–¥–∞–≤–∞–π—Ç–µ—Å—å! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!"
            achievement_color = '#ff8800'
        
        achievement_label = tk.Label(
            main_frame,
            text=achievement_text,
            font=('Arial', 12, 'italic'),
            fg=achievement_color,
            bg='#1a1a2e',
            pady=15
        )
        achievement_label.pack()
        
        # –ü–∞–Ω–µ–ª—å –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        buttons_frame = tk.Frame(main_frame, bg='#1a1a2e')
        buttons_frame.pack(pady=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ—ó –≥—Ä–∏
        new_game_btn = tk.Button(
            buttons_frame,
            text="üéÆ –ù–æ–≤–∞ –≥—Ä–∞",
            font=('Arial', 14, 'bold'),
            bg='#00ff88',
            fg='#1a2a2e',
            activebackground='#00cc6f',
            relief=tk.FLAT,
            padx=30,
            pady=12,
            cursor='hand2',
            command=lambda: [game_over_window.destroy(), self.reset_game()]
        )
        new_game_btn.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–∏—Ö–æ–¥—É
        exit_btn = tk.Button(
            buttons_frame,
            text="üè† –ú–µ–Ω—é",
            font=('Arial', 14, 'bold'),
            bg='#9b59b6',
            fg='#ffffff',
            activebackground='#8e44ad',
            relief=tk.FLAT,
            padx=30,
            pady=12,
            cursor='hand2',
            command=lambda: [game_over_window.destroy(), self.return_to_menu()]
        )
        exit_btn.pack(side=tk.LEFT, padx=5)
        
        # –ï—Ñ–µ–∫—Ç–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
        def on_enter_new_game(e):
            new_game_btn.config(bg='#00cc6f')
        
        def on_leave_new_game(e):
            new_game_btn.config(bg='#00ff88')
        
        def on_enter_exit(e):
            exit_btn.config(bg='#8e44ad')
        
        def on_leave_exit(e):
            exit_btn.config(bg='#9b59b6')
        
        new_game_btn.bind('<Enter>', on_enter_new_game)
        new_game_btn.bind('<Leave>', on_leave_new_game)
        exit_btn.bind('<Enter>', on_enter_exit)
        exit_btn.bind('<Leave>', on_leave_exit)
    
    def reset_game(self):
        """–°–∫–∏–¥–∞—î –≥—Ä—É –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É –¥–ª—è –Ω–æ–≤–æ—ó –ø–∞—Ä—Ç—ñ—ó"""
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ –ø–æ–ª—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é
        self.player_board = Board(self.board_size, self.ship_sizes)
        self.computer_board = Board(self.board_size, self.ship_sizes)
        
        # –ó–Ω–∏—â—É—î–º–æ –∫—Ä–∞–∫–µ–Ω–∞
        if hasattr(self, 'kraken') and self.kraken:
            self.kraken.destroy()
            self.kraken = None
        
        self.game_phase = "setup"
        self.current_ship_index = 0
        self.current_orientation = Orientation.HORIZONTAL
        
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.player_score = 0
        self.computer_score = 0
        self.player_shots = 0
        self.computer_shots = 0
        
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –®–Ü
        self.ai_mode = "hunt"
        self.ai_target_queue.clear()
        self.ai_last_hit = None
        self.ai_hit_direction = None
        
        self.rotate_button.config(state=tk.NORMAL)
        self.random_button.config(state=tk.NORMAL)
        self.update_info_label()
        self.update_score()
        self.draw_boards()
        if hasattr(self, "rockets_manager"):
            self.rockets_manager._update_rockets_label()

    
    def return_to_menu(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –≥—Ä–∞–≤—Ü—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        # –ó–Ω–∏—â—É—î–º–æ –∫—Ä–∞–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º –¥–æ –º–µ–Ω—é
        if hasattr(self, 'kraken') and self.kraken:
            self.kraken.destroy()
        
        # –û—á–∏—â–∞—î–º–æ –≤—ñ–∫–Ω–æ
        for widget in self.root.winfo_children():
            widget.destroy()
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é
        menu = MainMenu(self.root)
    
    def update_info_label(self):
        """–û–Ω–æ–≤–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—É –ø–∞–Ω–µ–ª—å –∑ –ø—ñ–¥–∫–∞–∑–∫–∞–º–∏ –¥–ª—è –≥—Ä–∞–≤—Ü—è"""
        if self.current_ship_index < len(self.ship_sizes):
            ship_size = self.ship_sizes[self.current_ship_index]
            ship_names = {5: "–ê–≤—ñ–∞–Ω–æ—Å–µ—Ü—å", 4: "–õ—ñ–Ω–∫–æ—Ä", 3: "–ö—Ä–µ–π—Å–µ—Ä", 2: "–ï—Å–º—ñ–Ω–µ—Ü—å", 1: "–ö–∞—Ç–µ—Ä"}
            ship_name = ship_names.get(ship_size, "–ö–æ—Ä–∞–±–µ–ª—å")
            orientation_text = "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ" if self.current_orientation == Orientation.HORIZONTAL else "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ"
            remaining = len(self.ship_sizes) - self.current_ship_index
            self.info_label.config(
                text=f"–†–æ–∑–º—ñ—Å—Ç—ñ—Ç—å {ship_name} ({ship_size} –∫–ª—ñ—Ç–∏–Ω) - {orientation_text} | –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {remaining}"
            )
    
    def update_score(self):
        """–û–Ω–æ–≤–ª—é—î –ø–∞–Ω–µ–ª—å –∑ —Ä–∞—Ö—É–Ω–∫–æ–º –≥—Ä–∏"""
        self.score_label.config(
            text=f"–ü–æ–ø–∞–¥–∞–Ω—å –≥—Ä–∞–≤—Ü—è: {self.player_score} | –ü–æ–ø–∞–¥–∞–Ω—å –∫–æ–º–ø'—é—Ç–µ—Ä–∞: {self.computer_score}"
        )


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –≥—Ä–∏"""
    root = tk.Tk()
    menu = MainMenu(root)
    root.mainloop()


if __name__ == "__main__":
    main()
