
import tkinter as tk
from tkinter import messagebox
import random
from enum import Enum
from typing import List, Tuple, Optional


class CellState(Enum):
    """–°—Ç–∞–Ω–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞ —ñ–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—ñ"""
    EMPTY = 0    # –ü–æ—Ä–æ–∂–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∞
    SHIP = 1     # –ö–ª—ñ—Ç–∏–Ω–∫–∞ –∑ –∫–æ—Ä–∞–±–ª–µ–º
    HIT = 2      # –í–ª—É—á–∞–Ω–Ω—è –≤ –∫–æ—Ä–∞–±–µ–ª—å
    MISS = 3     # –ü—Ä–æ–º–∞—Ö


class Orientation(Enum):
    """–û—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è –∫–æ—Ä–∞–±–ª—è –Ω–∞ –ø–æ–ª—ñ"""
    HORIZONTAL = 0  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–µ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
    VERTICAL = 1    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è


class Ship:
    """–ö–ª–∞—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è –Ω–∞ –ø–æ–ª—ñ"""
    
    def __init__(self, size: int, position: Tuple[int, int], orientation: Orientation):
        self.size = size              # –†–æ–∑–º—ñ—Ä –∫–æ—Ä–∞–±–ª—è (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—Ç–∏–Ω)
        self.position = position      # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è (x, y)
        self.orientation = orientation # –û—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ/–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ)
        self.hits = 0                 # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–ª—É—á–∞–Ω—å —É –∫–æ—Ä–∞–±–µ–ª—å
    
    def is_sunk(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–æ—Ç–æ–ø–ª–µ–Ω–∏–π –∫–æ—Ä–∞–±–µ–ª—å"""
        return self.hits >= self.size
    
    def get_coordinates(self) -> List[Tuple[int, int]]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, —è–∫—ñ –∑–∞–π–º–∞—î –∫–æ—Ä–∞–±–µ–ª—å"""
        coords = []
        x, y = self.position
        for i in range(self.size):
            if self.orientation == Orientation.HORIZONTAL:
                coords.append((x + i, y))
            else:
                coords.append((x, y + i))
        return coords


class Board:
    """–ö–ª–∞—Å —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –¥–ª—è –º–æ—Ä—Å—å–∫–æ–≥–æ –±–æ—é"""
    
    def __init__(self, size: int = 10):
        self.size = size  # –†–æ–∑–º—ñ—Ä –ø–æ–ª—è (–∑–∞–∑–≤–∏—á–∞–π 10x10)
        # –°—ñ—Ç–∫–∞ –∑—ñ —Å—Ç–∞–Ω–∞–º–∏ –∫–ª—ñ—Ç–∏–Ω–æ–∫
        self.grid = [[CellState.EMPTY for _ in range(size)] for _ in range(size)]
        self.ships: List[Ship] = []  # –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∞–±–ª—ñ–≤ –Ω–∞ –ø–æ–ª—ñ
        # –ú–∞—Ç—Ä–∏—Ü—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫ (–¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—Ä—ñ–ª—ñ–≤)
        self.revealed = [[False for _ in range(size)] for _ in range(size)]
    
    def can_place_ship(self, size: int, x: int, y: int, orientation: Orientation) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–æ–∂–Ω–∞ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∞–±–µ–ª—å —É –≤–∫–∞–∑–∞–Ω—ñ–π –ø–æ–∑–∏—Ü—ñ—ó"""
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏—Ö–æ–¥—É –∑–∞ –º–µ–∂—ñ –ø–æ–ª—è
        if orientation == Orientation.HORIZONTAL:
            if x + size > self.size:
                return False
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤—Å—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –≤—ñ–ª—å–Ω—ñ
            for i in range(size):
                if not self._is_cell_free(x + i, y):
                    return False
        else:
            if y + size > self.size:
                return False
            for i in range(size):
                if not self._is_cell_free(x, y + i):
                    return False
        return True
    
    def _is_cell_free(self, x: int, y: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞ —Ç–∞ –≤—Å—ñ —Å—É—Å—ñ–¥–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –≤—ñ–ª—å–Ω—ñ –≤—ñ–¥ –∫–æ—Ä–∞–±–ª—ñ–≤
        (–∫–æ—Ä–∞–±–ª—ñ –Ω–µ –º–æ–∂—É—Ç—å —Å—Ç–∏–∫–∞—Ç–∏—Å—è –Ω–∞–≤—ñ—Ç—å –ø–æ –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ)"""
        for dx in range(-1, 2):
            for dy in range(-1, 2):
                nx, ny = x + dx, y + dy
                if 0 <= nx < self.size and 0 <= ny < self.size:
                    if self.grid[ny][nx] == CellState.SHIP:
                        return False
        return True
    
    def place_ship(self, size: int, x: int, y: int, orientation: Orientation) -> bool:
        """–†–æ–∑–º—ñ—â—É—î –∫–æ—Ä–∞–±–µ–ª—å –Ω–∞ –ø–æ–ª—ñ, —è–∫—â–æ —Ü–µ –º–æ–∂–ª–∏–≤–æ"""
        if not self.can_place_ship(size, x, y, orientation):
            return False
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∫–æ—Ä–∞–±–µ–ª—å —Ç–∞ –¥–æ–¥–∞—î–º–æ –¥–æ —Å–ø–∏—Å–∫—É
        ship = Ship(size, (x, y), orientation)
        self.ships.append(ship)
        
        # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞ —Å—ñ—Ç—Ü—ñ —è–∫ –∑–∞–π–Ω—è—Ç—ñ –∫–æ—Ä–∞–±–ª–µ–º
        for coord_x, coord_y in ship.get_coordinates():
            self.grid[coord_y][coord_x] = CellState.SHIP
        
        return True
    
    def attack(self, x: int, y: int) -> Tuple[bool, bool, Optional[Ship]]:
        """–í–∏–∫–æ–Ω—É—î –∞—Ç–∞–∫—É –ø–æ –≤–∫–∞–∑–∞–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
        –ü–æ–≤–µ—Ä—Ç–∞—î: (–≤–ª—É—á–∞–Ω–Ω—è, –ø–æ—Ç–æ–ø–ª–µ–Ω–∏–π, –∫–æ—Ä–∞–±–µ–ª—å)"""
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ–∂ –ø–æ–ª—è
        if x < 0 or x >= self.size or y < 0 or y >= self.size:
            return False, False, None
        
        self.revealed[y][x] = True
        
        if self.grid[y][x] == CellState.SHIP:
            self.grid[y][x] = CellState.HIT
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ, —è–∫–∏–π –∫–æ—Ä–∞–±–µ–ª—å –±—É–≤ –≤—Ä–∞–∂–µ–Ω–∏–π
            for ship in self.ships:
                if (x, y) in ship.get_coordinates():
                    ship.hits += 1
                    # –Ø–∫—â–æ –∫–æ—Ä–∞–±–µ–ª—å –ø–æ—Ç–æ–ø–ª–µ–Ω–∏–π, –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞–≤–∫–æ–ª–æ
                    if ship.is_sunk():
                        self.mark_surrounding_as_miss(ship)
                        return True, True, ship
                    return True, False, ship
            
            return True, False, None
        elif self.grid[y][x] == CellState.EMPTY:
            self.grid[y][x] = CellState.MISS
            return False, False, None
        
        return False, False, None
    
    def mark_surrounding_as_miss(self, ship: Ship):
        """–ü–æ–∑–Ω–∞—á–∞—î –≤—Å—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞–≤–∫–æ–ª–æ –ø–æ—Ç–æ–ø–ª–µ–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è —è–∫ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø—Ä–æ–º–∞—Ö–∏
        –¶–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–∫—Ä–∏–≤–∞—î –Ω–µ–º–æ–∂–ª–∏–≤—ñ –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—ñ–≤ –∫–ª—ñ—Ç–∏–Ω–∫–∏"""
        ship_coords = ship.get_coordinates()
        
        # –î–ª—è –∫–æ–∂–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∫–æ—Ä–∞–±–ª—è –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ 8 —Å—É—Å—ñ–¥–Ω—ñ—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫
        for sx, sy in ship_coords:
            for dx in range(-1, 2):
                for dy in range(-1, 2):
                    nx, ny = sx + dx, sy + dy
                    if 0 <= nx < self.size and 0 <= ny < self.size:
                        if self.grid[ny][nx] == CellState.EMPTY:
                            self.grid[ny][nx] = CellState.MISS
                            self.revealed[ny][nx] = True
    
    def all_ships_sunk(self) -> bool:
        return all(ship.is_sunk() for ship in self.ships)
    
    def place_ships_randomly(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–º—ñ—â—É—î –≤—Å—ñ –∫–æ—Ä–∞–±–ª—ñ —É –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –ø–æ–∑–∏—Ü—ñ—è—Ö
        –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: 1 –ª—ñ–Ω–∫–æ—Ä (4), 2 –∫—Ä–µ–π—Å–µ—Ä–∏ (3), 3 –µ—Å–º—ñ–Ω—Ü—ñ (2), 4 –∫–∞—Ç–µ—Ä–∏ (1)"""
        ship_sizes = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1]
        
        for size in ship_sizes:
            placed = False
            attempts = 0
            # –ù–∞–º–∞–≥–∞—î–º–æ—Å—è —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∞–±–µ–ª—å –¥–æ 1000 —Ä–∞–∑—ñ–≤
            while not placed and attempts < 1000:
                x = random.randint(0, self.size - 1)
                y = random.randint(0, self.size - 1)
                orientation = random.choice([Orientation.HORIZONTAL, Orientation.VERTICAL])
                placed = self.place_ship(size, x, y, orientation)
                attempts += 1


class BattleshipGame:
    """–ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –≥—Ä–∏ –ú–æ—Ä—Å—å–∫–∏–π –±—ñ–π –∑ GUI"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("–ú–æ—Ä—Å—å–∫–∏–π –±—ñ–π")
        self.root.resizable(False, False)
        self.root.configure(bg='#1a1a2e')
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤
        self.cell_size = 40
        self.board_size = 10
        
        # –Ü–≥—Ä–æ–≤—ñ –ø–æ–ª—è
        self.player_board = Board(self.board_size)
        self.computer_board = Board(self.board_size)
        
        # –°—Ç–∞–Ω –≥—Ä–∏: setup (—Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è), playing (–≥—Ä–∞), ended (–∑–∞–≤–µ—Ä—à–µ–Ω–æ)
        self.game_phase = "setup"
        self.current_ship_index = 0
        self.ship_sizes = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1]
        self.current_orientation = Orientation.HORIZONTAL
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∏
        self.player_score = 0      # –í–ª—É—á–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—è
        self.computer_score = 0    # –í–ª—É—á–∞–Ω–Ω—è –∫–æ–º–ø'—é—Ç–µ—Ä–∞
        self.player_shots = 0      # –í—Å—å–æ–≥–æ –ø–æ—Å—Ç—Ä—ñ–ª—ñ–≤ –≥—Ä–∞–≤—Ü—è
        self.computer_shots = 0    # –í—Å—å–æ–≥–æ –ø–æ—Å—Ç—Ä—ñ–ª—ñ–≤ –∫–æ–º–ø'—é—Ç–µ—Ä–∞
        
        # –ó–º—ñ–Ω–Ω—ñ –¥–ª—è —Ä–æ–∑—É–º–Ω–æ–≥–æ –®–Ü
        self.ai_mode = "hunt"           # –†–µ–∂–∏–º: hunt (–ø–æ—à—É–∫) –∞–±–æ target (–¥–æ–±–∏–≤–∞–Ω–Ω—è)
        self.ai_target_queue = []       # –ß–µ—Ä–≥–∞ –∫–ª—ñ—Ç–∏–Ω–æ–∫ –¥–ª—è –∞—Ç–∞–∫–∏ –ø—ñ—Å–ª—è –≤–ª—É—á–∞–Ω–Ω—è
        self.ai_last_hit = None         # –û—Å—Ç–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–∞ –∞—Ç–∞–∫–∞
        self.ai_hit_direction = None    # –ù–∞–ø—Ä—è–º–æ–∫ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö –≤–ª—É—á–∞–Ω—å
        
        self.setup_ui()
        
    def setup_ui(self):
        """–°—Ç–≤–æ—Ä—é—î –≤–µ—Å—å –≥—Ä–∞—Ñ—ñ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥—Ä–∏"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∏
        title_frame = tk.Frame(self.root, bg='#1a1a2e')
        title_frame.pack(pady=20)
        
        title_label = tk.Label(
            title_frame,
            text="üö¢ –ú–û–†–°–¨–ö–ò–ô –ë–Ü–ô üö¢",
            font=('Arial', 28, 'bold'),
            fg='#00d4ff',
            bg='#1a1a2e'
        )
        title_label.pack()
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –ø–∞–Ω–µ–ª—å (–ø—ñ–¥–∫–∞–∑–∫–∏ –¥–ª—è –≥—Ä–∞–≤—Ü—è)
        self.info_label = tk.Label(
            self.root,
            text="–†–æ–∑–º—ñ—â—É–π—Ç–µ –∫–æ—Ä–∞–±–ª—ñ –Ω–∞ —Å–≤–æ—î–º—É –ø–æ–ª—ñ",
            font=('Arial', 14),
            fg='#ffffff',
            bg='#1a1a2e'
        )
        self.info_label.pack(pady=10)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–±–æ—Ö —ñ–≥—Ä–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        boards_frame = tk.Frame(self.root, bg='#1a1a2e')
        boards_frame.pack(pady=10)
        
        # –ü–æ–ª–µ –≥—Ä–∞–≤—Ü—è (–ª—ñ–≤–æ—Ä—É—á)
        player_container = tk.Frame(boards_frame, bg='#1a1a2e')
        player_container.pack(side=tk.LEFT, padx=20)
        
        player_title = tk.Label(
            player_container,
            text="–í–∞—à–µ –ø–æ–ª–µ",
            font=('Arial', 16, 'bold'),
            fg='#00ff88',
            bg='#1a1a2e'
        )
        player_title.pack(pady=5)
        
        self.player_canvas = tk.Canvas(
            player_container,
            width=self.cell_size * self.board_size + 1,
            height=self.cell_size * self.board_size + 1,
            bg='#0f3460',
            highlightthickness=2,
            highlightbackground='#00d4ff'
        )
        self.player_canvas.pack()
        # –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—ñ–≤
        self.player_canvas.bind('<Button-1>', self.on_player_board_click)
        self.player_canvas.bind('<Motion>', self.on_player_board_hover)
        
        # –ü–æ–ª–µ –∫–æ–º–ø'—é—Ç–µ—Ä–∞ (–ø—Ä–∞–≤–æ—Ä—É—á)
        computer_container = tk.Frame(boards_frame, bg='#1a1a2e')
        computer_container.pack(side=tk.LEFT, padx=20)
        
        computer_title = tk.Label(
            computer_container,
            text="–ü–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞",
            font=('Arial', 16, 'bold'),
            fg='#ff4444',
            bg='#1a1a2e'
        )
        computer_title.pack(pady=5)
        
        self.computer_canvas = tk.Canvas(
            computer_container,
            width=self.cell_size * self.board_size + 1,
            height=self.cell_size * self.board_size + 1,
            bg='#0f3460',
            highlightthickness=2,
            highlightbackground='#ff4444'
        )
        self.computer_canvas.pack()
        # –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—ñ–≤ –¥–ª—è –∞—Ç–∞–∫–∏
        self.computer_canvas.bind('<Button-1>', self.on_computer_board_click)
        
        # –ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        control_frame = tk.Frame(self.root, bg='#1a1a2e')
        control_frame.pack(pady=20)
        
        self.rotate_button = tk.Button(
            control_frame,
            text="üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –∫–æ—Ä–∞–±–µ–ª—å",
            font=('Arial', 12, 'bold'),
            bg='#00d4ff',
            fg='#1a1a2e',
            activebackground='#00a8cc',
            relief=tk.FLAT,
            padx=20,
            pady=10,
            command=self.rotate_ship
        )
        self.rotate_button.pack(side=tk.LEFT, padx=5)
        
        self.random_button = tk.Button(
            control_frame,
            text="üé≤ –í–∏–ø–∞–¥–∫–æ–≤–æ",
            font=('Arial', 12, 'bold'),
            bg='#00ff88',
            fg='#1a1a2e',
            activebackground='#00cc6f',
            relief=tk.FLAT,
            padx=20,
            pady=10,
            command=self.place_ships_randomly
        )
        self.random_button.pack(side=tk.LEFT, padx=5)
        
        self.reset_button = tk.Button(
            control_frame,
            text="üîÑ –ù–æ–≤–∞ –≥—Ä–∞",
            font=('Arial', 12, 'bold'),
            bg='#ff8800',
            fg='#1a1a2e',
            activebackground='#cc6600',
            relief=tk.FLAT,
            padx=20,
            pady=10,
            command=self.reset_game
        )
        self.reset_button.pack(side=tk.LEFT, padx=5)
        
        # –ü–∞–Ω–µ–ª—å —Ä–∞—Ö—É–Ω–∫—É
        score_frame = tk.Frame(self.root, bg='#1a1a2e')
        score_frame.pack(pady=10)
        
        self.score_label = tk.Label(
            score_frame,
            text="–ü–æ–ø–∞–¥–∞–Ω—å –≥—Ä–∞–≤—Ü—è: 0 | –ü–æ–ø–∞–¥–∞–Ω—å –∫–æ–º–ø'—é—Ç–µ—Ä–∞: 0",
            font=('Arial', 12),
            fg='#ffffff',
            bg='#1a1a2e'
        )
        self.score_label.pack()
        
        self.draw_boards()
        
    def draw_boards(self):
        self.draw_board(self.player_canvas, self.player_board, show_ships=True)
        self.draw_board(self.computer_canvas, self.computer_board, show_ships=False)
        
    def draw_board(self, canvas: tk.Canvas, board: Board, show_ships: bool):
        """–ú–∞–ª—é—î —ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ –Ω–∞ canvas
        show_ships - —á–∏ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –∫–æ—Ä–∞–±–ª—ñ (True –¥–ª—è —Å–≤–æ–≥–æ –ø–æ–ª—è, False –¥–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞)"""
        canvas.delete('all')
        
        # –ú–∞–ª—é—î–º–æ —Å—ñ—Ç–∫—É –ø–æ–ª—è
        for i in range(self.board_size + 1):
            # Vertical lines
            canvas.create_line(
                i * self.cell_size, 0,
                i * self.cell_size, self.board_size * self.cell_size,
                fill='#16213e', width=1
            )
            # Horizontal lines
            canvas.create_line(
                0, i * self.cell_size,
                self.board_size * self.cell_size, i * self.cell_size,
                fill='#16213e', width=1
            )
        
        # –ú–∞–ª—é—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º–∏ –∫–æ–ª—å–æ—Ä–∞–º–∏ —Ç–∞ —Å–∏–º–≤–æ–ª–∞–º–∏
        for y in range(self.board_size):
            for x in range(self.board_size):
                cell_state = board.grid[y][x]
                is_revealed = board.revealed[y][x]
                
                x1 = x * self.cell_size
                y1 = y * self.cell_size
                x2 = x1 + self.cell_size
                y2 = y1 + self.cell_size
                
                if cell_state == CellState.HIT:
                    canvas.create_rectangle(x1, y1, x2, y2, fill='#ff4444', outline='#16213e')
                    canvas.create_text(
                        x1 + self.cell_size // 2,
                        y1 + self.cell_size // 2,
                        text='üí•',
                        font=('Arial', 16)
                    )
                elif cell_state == CellState.MISS:
                    canvas.create_rectangle(x1, y1, x2, y2, fill='#4a5568', outline='#16213e')
                    canvas.create_text(
                        x1 + self.cell_size // 2,
                        y1 + self.cell_size // 2,
                        text='‚óã',
                        font=('Arial', 16),
                        fill='#ffffff'
                    )
                elif cell_state == CellState.SHIP and show_ships:
                    canvas.create_rectangle(x1, y1, x2, y2, fill='#00ff88', outline='#16213e')
                else:
                    canvas.create_rectangle(x1, y1, x2, y2, fill='#0f3460', outline='#16213e')
    
    def on_player_board_click(self, event):
        """–û–±—Ä–æ–±–ª—è—î –∫–ª—ñ–∫ –ø–æ –ø–æ–ª—é –≥—Ä–∞–≤—Ü—è –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—ñ–≤"""
        if self.game_phase != "setup":
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –º–∏—à—ñ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Å—ñ—Ç–∫–∏
        x = event.x // self.cell_size
        y = event.y // self.cell_size
        
        if self.current_ship_index < len(self.ship_sizes):
            ship_size = self.ship_sizes[self.current_ship_index]
            # –ù–∞–º–∞–≥–∞—î–º–æ—Å—è —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∞–±–µ–ª—å
            if self.player_board.place_ship(ship_size, x, y, self.current_orientation):
                self.current_ship_index += 1
                
                # –Ø–∫—â–æ –≤—Å—ñ –∫–æ—Ä–∞–±–ª—ñ —Ä–æ–∑–º—ñ—â–µ–Ω—ñ, –ø–æ—á–∏–Ω–∞—î–º–æ –≥—Ä—É
                if self.current_ship_index >= len(self.ship_sizes):
                    self.start_game()
                else:
                    self.update_info_label()
                
                self.draw_boards()
            else:
                messagebox.showwarning("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∞–±–µ–ª—å —Ç—É—Ç!")
    
    def on_player_board_hover(self, event):
        """–ü–æ–∫–∞–∑—É—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ –º–∏—à—ñ"""
        if self.game_phase != "setup" or self.current_ship_index >= len(self.ship_sizes):
            return
        
        x = event.x // self.cell_size
        y = event.y // self.cell_size
        
        # –ü–µ—Ä–µ–º–∞–ª—å–æ–≤—É—î–º–æ –ø–æ–ª–µ
        self.draw_board(self.player_canvas, self.player_board, show_ships=True)
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ (–∑–µ–ª–µ–Ω–∏–π - –º–æ–∂–Ω–∞, —á–µ—Ä–≤–æ–Ω–∏–π - –Ω–µ –º–æ–∂–Ω–∞)
        ship_size = self.ship_sizes[self.current_ship_index]
        can_place = self.player_board.can_place_ship(ship_size, x, y, self.current_orientation)
        color = '#88ff88' if can_place else '#ff8888'
        
        for i in range(ship_size):
            if self.current_orientation == Orientation.HORIZONTAL:
                px, py = x + i, y
            else:
                px, py = x, y + i
            
            if 0 <= px < self.board_size and 0 <= py < self.board_size:
                x1 = px * self.cell_size
                y1 = py * self.cell_size
                x2 = x1 + self.cell_size
                y2 = y1 + self.cell_size
                self.player_canvas.create_rectangle(
                    x1, y1, x2, y2,
                    fill=color,
                    outline='#ffffff',
                    stipple='gray50'
                )
    
    def on_computer_board_click(self, event):
        """–û–±—Ä–æ–±–ª—è—î –∫–ª—ñ–∫ –ø–æ –ø–æ–ª—é –∫–æ–º–ø'—é—Ç–µ—Ä–∞ –¥–ª—è –∞—Ç–∞–∫–∏"""
        if self.game_phase != "playing":
            return
        
        x = event.x // self.cell_size
        y = event.y // self.cell_size
        
        # –ù–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ —Å—Ç—Ä—ñ–ª—è—Ç–∏ –ø–æ –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–ª—ñ—Ç–∏–Ω–∫–∞—Ö
        if self.computer_board.revealed[y][x]:
            return
        
        self.player_shots += 1
        hit, sunk, ship = self.computer_board.attack(x, y)
        
        if hit:
            self.player_score += 1
            if sunk:
                messagebox.showinfo("–í–ª—É—á–Ω–æ!", "–í–∏ –ø–æ—Ç–æ–ø–∏–ª–∏ –∫–æ—Ä–∞–±–µ–ª—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞! üéâ\n–ö–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞–≤–∫–æ–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç—ñ.")
            else:
                self.info_label.config(text="–í–ª—É—á–Ω–æ! –°—Ç—Ä—ñ–ª—è–π—Ç–µ —â–µ —Ä–∞–∑! üéØ")
        else:
            # –ü—Ä–∏ –ø—Ä–æ–º–∞—Ö—É –ø–µ—Ä–µ–¥–∞—î–º–æ —Ö—ñ–¥ –∫–æ–º–ø'—é—Ç–µ—Ä—É
            self.info_label.config(text="–ü—Ä–æ–º–∞—Ö! –•—ñ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...")
            self.root.after(500, self.computer_turn)
        
        self.draw_boards()
        self.update_score()
        
        if self.computer_board.all_ships_sunk():
            self.end_game(True)
    
    def computer_turn(self):
        """–•—ñ–¥ –∫–æ–º–ø'—é—Ç–µ—Ä–∞ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —Ä–æ–∑—É–º–Ω–æ–≥–æ –®–Ü"""
        if self.game_phase != "playing":
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –∞—Ç–∞–∫–∏ –≤—ñ–¥ –®–Ü
        x, y = self.get_ai_move()
        
        if x is None or y is None:
            return
        
        self.computer_shots += 1
        hit, sunk, ship = self.player_board.attack(x, y)
        
        if hit:
            self.computer_score += 1
            self.ai_last_hit = (x, y)
            
            if not sunk:
                # –í–ª—É—á–∞–Ω–Ω—è: –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Ä–µ–∂–∏–º –¥–æ–±–∏–≤–∞–Ω–Ω—è, –¥–æ–¥–∞—î–º–æ —Å—É—Å—ñ–¥–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏
                self.ai_mode = "target"
                self.add_adjacent_targets(x, y)
                self.info_label.config(text="–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–ª—É—á–∏–≤! –í—ñ–Ω —Å—Ç—Ä—ñ–ª—è—î –∑–Ω–æ–≤—É...")
                self.root.after(1000, self.computer_turn)
            else:
                # –ö–æ—Ä–∞–±–µ–ª—å –ø–æ—Ç–æ–ø–ª–µ–Ω–∏–π: –æ—á–∏—â–∞—î–º–æ —Ü—ñ–ª—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Ä–µ–∂–∏–º—É –ø–æ—à—É–∫—É
                self.clean_target_queue_around_ship(ship)
                self.ai_mode = "hunt"
                self.ai_target_queue.clear()
                self.ai_last_hit = None
                self.ai_hit_direction = None
                self.info_label.config(text="–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø–æ—Ç–æ–ø–∏–≤ –≤–∞—à –∫–æ—Ä–∞–±–µ–ª—å! üíî")
                self.root.after(1000, self.computer_turn)
        else:
            self.ai_mode = "hunt" if not self.ai_target_queue else "target"
            self.info_label.config(text="–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–æ–º–∞—Ö–Ω—É–≤—Å—è! –í–∞—à —Ö—ñ–¥! üéØ")
        
        self.draw_boards()
        self.update_score()
        
        if self.player_board.all_ships_sunk():
            self.end_game(False)
    
    def get_ai_move(self) -> Tuple[Optional[int], Optional[int]]:
        """–†–æ–∑—É–º–Ω–µ –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ä—ñ—à–µ–Ω—å –®–Ü –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω—É –∞—Ç–∞–∫—É
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –¥–≤–∞ —Ä–µ–∂–∏–º–∏: hunt (–ø–æ—à—É–∫) —Ç–∞ target (–¥–æ–±–∏–≤–∞–Ω–Ω—è)"""
        
        # –†–µ–∂–∏–º –¥–æ–±–∏–≤–∞–Ω–Ω—è: –∞—Ç–∞–∫—É—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –ø–æ—Ä—É—á –∑ –≤–ª—É—á–∞–Ω–Ω—è–º–∏
        if self.ai_mode == "target" and self.ai_target_queue:
            while self.ai_target_queue:
                x, y = self.ai_target_queue.pop(0)
                if 0 <= x < self.board_size and 0 <= y < self.board_size:
                    if not self.player_board.revealed[y][x]:
                        return x, y
            # –Ø–∫—â–æ —á–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —Ä–µ–∂–∏–º—É –ø–æ—à—É–∫—É
            self.ai_mode = "hunt"
        
        # –†–µ–∂–∏–º –ø–æ—à—É–∫—É: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —à–∞—Ö–æ–≤—É –º–æ–¥–µ–ª—å –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        attempts = 0
        while attempts < 100:
            x = random.randint(0, self.board_size - 1)
            y = random.randint(0, self.board_size - 1)
            
            # –í—ñ–¥–¥–∞—î–º–æ –ø–µ—Ä–µ–≤–∞–≥—É —à–∞—Ö–æ–≤—ñ–π –º–æ–¥–µ–ª—ñ (–∑–º–µ–Ω—à—É—î –ø—Ä–æ—Å—Ç—ñ—Ä –ø–æ—à—É–∫—É)
            if not self.player_board.revealed[y][x]:
                if (x + y) % 2 == 0 or attempts > 50:
                    return x, y
            
            attempts += 1
        
        return None, None
    
    def add_adjacent_targets(self, x: int, y: int):
        """–î–æ–¥–∞—î —Å—É—Å—ñ–¥–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–æ —á–µ—Ä–≥–∏ —Ü—ñ–ª–µ–π –ø—ñ—Å–ª—è –≤–ª—É—á–∞–Ω–Ω—è
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î 4 –Ω–∞–ø—Ä—è–º–∫–∏: –≤–ø—Ä–∞–≤–æ, –≤–Ω–∏–∑, –≤–ª—ñ–≤–æ, –≤–≥–æ—Ä—É"""
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < self.board_size and 0 <= ny < self.board_size:
                if not self.player_board.revealed[ny][nx]:
                    if (nx, ny) not in self.ai_target_queue:
                        self.ai_target_queue.append((nx, ny))
    
    def clean_target_queue_around_ship(self, ship: Optional[Ship]):
        """–í–∏–¥–∞–ª—è—î –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞–≤–∫–æ–ª–æ –ø–æ—Ç–æ–ø–ª–µ–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –∑ —á–µ—Ä–≥–∏ —Ü—ñ–ª–µ–π
        –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± –®–Ü –Ω–µ –Ω–∞–º–∞–≥–∞–≤—Å—è —Å—Ç—Ä—ñ–ª—è—Ç–∏ –ø–æ –Ω–µ–º–æ–∂–ª–∏–≤–∏—Ö –ø–æ–∑–∏—Ü—ñ—è—Ö"""
        if ship is None:
            return
        
        ship_coords = ship.get_coordinates()
        cells_to_remove = set()
        
        # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞–≤–∫–æ–ª–æ –∫–æ—Ä–∞–±–ª—è
        for sx, sy in ship_coords:
            for dx in range(-1, 2):
                for dy in range(-1, 2):
                    nx, ny = sx + dx, sy + dy
                    cells_to_remove.add((nx, ny))
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —á–µ—Ä–≥—É, –≤–∏–¥–∞–ª—è—é—á–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –Ω–∞–≤–∫–æ–ª–æ –ø–æ—Ç–æ–ø–ª–µ–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
        self.ai_target_queue = [(x, y) for x, y in self.ai_target_queue if (x, y) not in cells_to_remove]
    
    def rotate_ship(self):
        if self.game_phase == "setup":
            self.current_orientation = (
                Orientation.VERTICAL if self.current_orientation == Orientation.HORIZONTAL
                else Orientation.HORIZONTAL
            )
    
    def place_ships_randomly(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–º—ñ—â—É—î –≤—Å—ñ –∫–æ—Ä–∞–±–ª—ñ –≥—Ä–∞–≤—Ü—è —É –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –ø–æ–∑–∏—Ü—ñ—è—Ö"""
        if self.game_phase == "setup":
            self.player_board = Board(self.board_size)
            self.player_board.place_ships_randomly()
            self.current_ship_index = len(self.ship_sizes)
            self.draw_boards()
            self.start_game()
    
    def start_game(self):
        """–ü–æ—á–∏–Ω–∞—î –≥—Ä—É –ø—ñ—Å–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∞–±–ª—ñ–≤"""
        self.game_phase = "playing"
        # –†–æ–∑–º—ñ—â—É—î–º–æ –∫–æ—Ä–∞–±–ª—ñ –∫–æ–º–ø'—é—Ç–µ—Ä–∞
        self.computer_board.place_ships_randomly()
        self.info_label.config(text="–ì—Ä–∞ –ø–æ—á–∞–ª–∞—Å—è! –°—Ç—Ä—ñ–ª—è–π—Ç–µ –ø–æ –ø–æ–ª—é –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞! üéØ")
        # –í–∏–º–∏–∫–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
        self.rotate_button.config(state=tk.DISABLED)
        self.random_button.config(state=tk.DISABLED)
        self.draw_boards()
    
    def end_game(self, player_won: bool):
        """–ó–∞–≤–µ—Ä—à—É—î –≥—Ä—É —Ç–∞ –ø–æ–∫–∞–∑—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏"""
        self.game_phase = "ended"
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –∫–æ—Ä–∞–±–ª—ñ –∫–æ–º–ø'—é—Ç–µ—Ä–∞
        self.draw_board(self.computer_canvas, self.computer_board, show_ships=True)
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        player_accuracy = (self.player_score / self.player_shots * 100) if self.player_shots > 0 else 0
        computer_accuracy = (self.computer_score / self.computer_shots * 100) if self.computer_shots > 0 else 0
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–∞—Å—Ç–æ–º–Ω–µ –≤—ñ–∫–Ω–æ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        self.show_game_over_window(player_won, player_accuracy, computer_accuracy)
    
    def show_game_over_window(self, player_won: bool, player_accuracy: float, computer_accuracy: float):
        """–ü–æ–∫–∞–∑—É—î –∫–∞—Å—Ç–æ–º–Ω–µ –≤—ñ–∫–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é"""
        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        game_over_window = tk.Toplevel(self.root)
        game_over_window.title("–ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        game_over_window.configure(bg='#1a1a2e')
        game_over_window.resizable(False, False)
        game_over_window.grab_set()
        
        # –¶–µ–Ω—Ç—Ä—É—î–º–æ –≤—ñ–∫–Ω–æ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ
        window_width = 500
        window_height = 550
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        game_over_window.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏
        main_frame = tk.Frame(game_over_window, bg='#1a1a2e', padx=30, pady=30)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        result_emoji = "üèÜ" if player_won else "üíî"
        result_text = "–ü–ï–†–ï–ú–û–ì–ê!" if player_won else "–ü–û–†–ê–ó–ö–ê"
        result_color = '#00ff88' if player_won else '#ff4444'
        
        title_label = tk.Label(
            main_frame,
            text=f"{result_emoji} {result_text} {result_emoji}",
            font=('Arial', 32, 'bold'),
            fg=result_color,
            bg='#1a1a2e'
        )
        title_label.pack(pady=(0, 10))
        
        # Subtitle
        subtitle_text = "–í—ñ—Ç–∞—î–º–æ! –í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏!" if player_won else "–ö–æ–º–ø'—é—Ç–µ—Ä –ø–µ—Ä–µ–º—ñ–≥ —Ü—å–æ–≥–æ —Ä–∞–∑—É..."
        subtitle_label = tk.Label(
            main_frame,
            text=subtitle_text,
            font=('Arial', 14),
            fg='#ffffff',
            bg='#1a1a2e'
        )
        subtitle_label.pack(pady=(0, 20))
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_frame = tk.Frame(main_frame, bg='#0f3460', relief=tk.RAISED, bd=2)
        stats_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # Stats title
        stats_title = tk.Label(
            stats_frame,
            text="üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–†–ò",
            font=('Arial', 18, 'bold'),
            fg='#00d4ff',
            bg='#0f3460',
            pady=15
        )
        stats_title.pack()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–≤—Ü—è
        player_frame = tk.Frame(stats_frame, bg='#0f3460', pady=10)
        player_frame.pack(fill=tk.X, padx=20)
        
        player_title = tk.Label(
            player_frame,
            text="üë§ –ì–†–ê–í–ï–¶–¨",
            font=('Arial', 14, 'bold'),
            fg='#00ff88',
            bg='#0f3460',
            anchor='w'
        )
        player_title.pack(anchor='w', pady=(0, 5))
        
        player_stats = [
            f"–ü–æ—Å—Ç—Ä—ñ–ª—ñ–≤: {self.player_shots}",
            f"–í–ª—É—á–∞–Ω—å: {self.player_score}",
            f"–¢–æ—á–Ω—ñ—Å—Ç—å: {player_accuracy:.1f}%"
        ]
        
        for stat in player_stats:
            stat_label = tk.Label(
                player_frame,
                text=f"  ‚Ä¢ {stat}",
                font=('Arial', 12),
                fg='#ffffff',
                bg='#0f3460',
                anchor='w'
            )
            stat_label.pack(anchor='w', pady=2)
        
        # –†–æ–∑–¥—ñ–ª—å–Ω–∏–∫
        divider = tk.Frame(stats_frame, bg='#16213e', height=2)
        divider.pack(fill=tk.X, padx=20, pady=10)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–ø'—é—Ç–µ—Ä–∞
        computer_frame = tk.Frame(stats_frame, bg='#0f3460', pady=10)
        computer_frame.pack(fill=tk.X, padx=20)
        
        computer_title = tk.Label(
            computer_frame,
            text="ü§ñ –ö–û–ú–ü'–Æ–¢–ï–†",
            font=('Arial', 14, 'bold'),
            fg='#ff4444',
            bg='#0f3460',
            anchor='w'
        )
        computer_title.pack(anchor='w', pady=(0, 5))
        
        computer_stats = [
            f"–ü–æ—Å—Ç—Ä—ñ–ª—ñ–≤: {self.computer_shots}",
            f"–í–ª—É—á–∞–Ω—å: {self.computer_score}",
            f"–¢–æ—á–Ω—ñ—Å—Ç—å: {computer_accuracy:.1f}%"
        ]
        
        for stat in computer_stats:
            stat_label = tk.Label(
                computer_frame,
                text=f"  ‚Ä¢ {stat}",
                font=('Arial', 12),
                fg='#ffffff',
                bg='#0f3460',
                anchor='w'
            )
            stat_label.pack(anchor='w', pady=2)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        if player_won:
            achievement_text = "‚≠ê –í—ñ–¥–º—ñ–Ω–Ω–∞ –≥—Ä–∞! –í–∏ - —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –∞–¥–º—ñ—Ä–∞–ª!" if player_accuracy >= 50 else "‚ú® –ì–∞—Ä–Ω–∞ –≥—Ä–∞! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏—Å—å!"
            achievement_color = '#ffd700' if player_accuracy >= 50 else '#00d4ff'
        else:
            achievement_text = "üí™ –ù–µ –∑–¥–∞–≤–∞–π—Ç–µ—Å—å! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!"
            achievement_color = '#ff8800'
        
        achievement_label = tk.Label(
            main_frame,
            text=achievement_text,
            font=('Arial', 12, 'italic'),
            fg=achievement_color,
            bg='#1a1a2e',
            pady=15
        )
        achievement_label.pack()
        
        # –ü–∞–Ω–µ–ª—å –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        buttons_frame = tk.Frame(main_frame, bg='#1a1a2e')
        buttons_frame.pack(pady=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ—ó –≥—Ä–∏
        new_game_btn = tk.Button(
            buttons_frame,
            text="üéÆ –ù–æ–≤–∞ –≥—Ä–∞",
            font=('Arial', 14, 'bold'),
            bg='#00ff88',
            fg='#1a1a2e',
            activebackground='#00cc6f',
            relief=tk.FLAT,
            padx=30,
            pady=12,
            cursor='hand2',
            command=lambda: [game_over_window.destroy(), self.reset_game()]
        )
        new_game_btn.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–∏—Ö–æ–¥—É
        exit_btn = tk.Button(
            buttons_frame,
            text="üö™ –í–∏—Ö—ñ–¥",
            font=('Arial', 14, 'bold'),
            bg='#ff4444',
            fg='#ffffff',
            activebackground='#cc3333',
            relief=tk.FLAT,
            padx=30,
            pady=12,
            cursor='hand2',
            command=self.root.quit
        )
        exit_btn.pack(side=tk.LEFT, padx=5)
        
        # –ï—Ñ–µ–∫—Ç–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
        def on_enter_new_game(e):
            new_game_btn.config(bg='#00cc6f')
        
        def on_leave_new_game(e):
            new_game_btn.config(bg='#00ff88')
        
        def on_enter_exit(e):
            exit_btn.config(bg='#cc3333')
        
        def on_leave_exit(e):
            exit_btn.config(bg='#ff4444')
        
        new_game_btn.bind('<Enter>', on_enter_new_game)
        new_game_btn.bind('<Leave>', on_leave_new_game)
        exit_btn.bind('<Enter>', on_enter_exit)
        exit_btn.bind('<Leave>', on_leave_exit)
    
    def reset_game(self):
        """–°–∫–∏–¥–∞—î –≥—Ä—É –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É –¥–ª—è –Ω–æ–≤–æ—ó –ø–∞—Ä—Ç—ñ—ó"""
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ –ø–æ–ª—è
        self.player_board = Board(self.board_size)
        self.computer_board = Board(self.board_size)
        self.game_phase = "setup"
        self.current_ship_index = 0
        self.current_orientation = Orientation.HORIZONTAL
        
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.player_score = 0
        self.computer_score = 0
        self.player_shots = 0
        self.computer_shots = 0
        
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –®–Ü
        self.ai_mode = "hunt"
        self.ai_target_queue.clear()
        self.ai_last_hit = None
        self.ai_hit_direction = None
        
        self.rotate_button.config(state=tk.NORMAL)
        self.random_button.config(state=tk.NORMAL)
        self.update_info_label()
        self.update_score()
        self.draw_boards()
    
    def update_info_label(self):
        """–û–Ω–æ–≤–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—É –ø–∞–Ω–µ–ª—å –∑ –ø—ñ–¥–∫–∞–∑–∫–∞–º–∏ –¥–ª—è –≥—Ä–∞–≤—Ü—è"""
        if self.current_ship_index < len(self.ship_sizes):
            ship_size = self.ship_sizes[self.current_ship_index]
            ship_names = {4: "–õ—ñ–Ω–∫–æ—Ä", 3: "–ö—Ä–µ–π—Å–µ—Ä", 2: "–ï—Å–º—ñ–Ω–µ—Ü—å", 1: "–ö–∞—Ç–µ—Ä"}
            ship_name = ship_names.get(ship_size, "–ö–æ—Ä–∞–±–µ–ª—å")
            orientation_text = "–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ" if self.current_orientation == Orientation.HORIZONTAL else "–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ"
            remaining = len(self.ship_sizes) - self.current_ship_index
            self.info_label.config(
                text=f"–†–æ–∑–º—ñ—Å—Ç—ñ—Ç—å {ship_name} ({ship_size} –∫–ª—ñ—Ç–∏–Ω) - {orientation_text} | –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {remaining}"
            )
    
    def update_score(self):
        """–û–Ω–æ–≤–ª—é—î –ø–∞–Ω–µ–ª—å –∑ —Ä–∞—Ö—É–Ω–∫–æ–º –≥—Ä–∏"""
        self.score_label.config(
            text=f"–ü–æ–ø–∞–¥–∞–Ω—å –≥—Ä–∞–≤—Ü—è: {self.player_score} | –ü–æ–ø–∞–¥–∞–Ω—å –∫–æ–º–ø'—é—Ç–µ—Ä–∞: {self.computer_score}"
        )


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –≥—Ä–∏"""
    root = tk.Tk()
    game = BattleshipGame(root)
    root.mainloop()


if __name__ == "__main__":
    main()
