# rockets.py
import random
import tkinter as tk
from typing import Optional, Tuple, Set, Callable


class RocketsManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–∫–µ—Ç –¥–ª—è BattleshipGame.
    - –ü—ñ–¥—Ç—Ä–∏–º—É—î —Ä—É—á–Ω–µ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è '—Ä–∞–∫–µ—Ç—å' –≥—Ä–∞–≤—Ü–µ–º –ø—ñ–¥ —á–∞—Å —Ñ–∞–∑–∏ setup (–æ–ø—Ü—ñ–π–Ω–æ).
    - –î–æ–∑–≤–æ–ª—è—î –∫–∏–¥–∞—Ç–∏ —Ä–∞–∫–µ—Ç—É –ø—ñ–¥ —á–∞—Å –≥—Ä–∏ (1x1 –Ω–∞ 6x6 –∞–±–æ 3x3 –Ω–∞ –±—ñ–ª—å—à–∏—Ö –ø–æ–ª—è—Ö).
    - –ü—ñ–¥—Ç—Ä–∏–º—É—î —Ä–∞–∫–µ—Ç–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ).
    - –ú–∞–ª—é—î —Ç–∏–º—á–∞—Å–æ–≤–∏–π –µ—Ñ–µ–∫—Ç –≤–∏–±—É—Ö—É –Ω–∞ canvas.
    """

    def __init__(
        self,
        game,  # –æ—á—ñ–∫—É—î–º–æ BattleshipGame –æ–±'—î–∫—Ç
        player_canvas: tk.Canvas,
        computer_canvas: tk.Canvas,
        board_size: int,
        root: tk.Tk,
        rockets_limit_map: dict | None = None,
    ):
        self.game = game
        self.root = root
        self.player_canvas = player_canvas
        self.computer_canvas = computer_canvas
        self.board_size = board_size

        # –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–∫–µ—Ç –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–ª—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
        default = {6: 2, 10: 3, 14: 4}
        self.rockets_limit = rockets_limit_map if rockets_limit_map else default
        self.rockets_limit_count = self.rockets_limit.get(board_size, 3)

        # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ "—Ä–æ–∑–º—ñ—â–µ–Ω–∏—Ö" —Ä–∞–∫–µ—Ç –≥—Ä–∞–≤—Ü—è —è–∫ –º–Ω–æ–∂–∏–Ω—É (–º–æ–∂–Ω–∞ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏)
        self.player_rockets: Set[Tuple[int, int]] = set()
        # —Ä–∞–∫–µ—Ç–∏ –∫–æ–º–ø'—é—Ç–µ—Ä–∞ (—è–∫—â–æ —Ö–æ—á–µ—à ‚Äî –º–æ–∂–Ω–∞ —Ä–æ–∑–º—ñ—â–∞—Ç–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ)
        self.computer_rockets: Set[Tuple[int, int]] = set()

        # —Ä–µ–∂–∏–º–∏: None, "placing" (—Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü–µ–º), "throw" (–∫–∏–¥–∞–Ω–Ω—è –ø—ñ–¥ —á–∞—Å —Ö–æ–¥—É)
        self.mode: Optional[str] = None

        # –∫–æ–ª–±–µ–∫–∏ / –∑—Ä—É—á–Ω—ñ –ø—Ä–∞–ø–æ—Ä–∏
        self.on_rocket_thrown_callback: Optional[Callable[[str, int, int, int], None]] = None
        # –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–ª—è UI)
        self._last_throw_result = None

        # —Ç–∏–º—á–∞—Å–æ–≤—ñ –≥—Ä–∞—Ñ—ñ—á–Ω—ñ –æ–±'—î–∫—Ç–∏ –∞–Ω—ñ–º–∞—Ü—ñ–π (—â–æ–± –ø–æ—Ç—ñ–º –≤–∏–¥–∞–ª–∏—Ç–∏)
        self._temp_items = []

        # UI –æ–±'—î–∫—Ç–∏
        self.rocket_button = None
        self.rockets_label = None

        # –ø—Ä–∏–≤'—è–∑–∫–∞ –¥–æ –≥—Ä–∏
        setattr(self.game, "rockets_manager", self)

        # –ª—ñ—á–∏–ª—å–Ω–∏–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —Ä–∞–∫–µ—Ç –≥—Ä–∞–≤—Ü–µ–º
        if not hasattr(self.game, "player_rockets_used"):
            self.game.player_rockets_used = []


    def start_placing(self):
        if self.game.game_phase != "setup":
            return
        self.mode = "placing"
        self.game.info_label.config(
            text=f"–†–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–∞–∫–µ—Ç (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ): –∫–ª–∞—Ü–Ω—ñ—Ç—å –Ω–∞ –ø–æ–ª—ñ –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è (–º–∞–∫—Å {self.rockets_limit_count})."
        )

    def stop_placing(self):
        self.mode = None
        self.game.update_info_label()

    def toggle_place_at(self, x: int, y: int) -> bool:
        """–î–æ–¥–∞—î/–≤–∏–¥–∞–ª—è—î –º–∞—Ä–∫–µ—Ä —Ä–∞–∫–µ—Ç–∏ —É –ø–æ–∑–∏—Ü—ñ—ó (x,y) –¥–ª—è –≥—Ä–∞–≤—Ü—è (–≤–∏–∑—É–∞–ª—å–Ω–æ)."""
        if self.game.game_phase != "setup":
            return False

        if (x, y) in self.player_rockets:
            self.player_rockets.remove((x, y))
            self.game.draw_boards()
            self._update_rockets_label()
            return True

        if len(self.player_rockets) >= self.rockets_limit_count:
            return False

        # –ù–µ —Å—Ç–∞–≤–∏–º–æ —Ä–∞–∫–µ—Ç–∏ –ø–æ–≤–µ—Ä—Ö –∫–æ—Ä–∞–±–ª—ñ–≤
        if 0 <= x < self.board_size and 0 <= y < self.board_size:
            if self.game.player_board.grid[y][x] == self.game.player_board.grid[y][x].__class__.EMPTY:
                self.player_rockets.add((x, y))
                self.game.draw_boards()
                self._update_rockets_label()
                return True
        return False

    # ------------------------
    # –†–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ä–∞–∫–µ—Ç –∫–æ–º–ø'—é—Ç–µ—Ä–∞ (–ø—Ä–∏—Ö–æ–≤–∞–Ω–æ)
    # ------------------------
    def place_computer_rockets_random(self):
        """–†–æ–∑—Å—Ç–∞–≤–ª—è—î –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ —Ä–∞–∫–µ—Ç–∏ –∫–æ–º–ø'—é—Ç–µ—Ä–∞."""
        attempts = 0
        while len(self.computer_rockets) < self.rockets_limit_count and attempts < 5000:
            x = random.randint(0, self.board_size - 1)
            y = random.randint(0, self.board_size - 1)
            # —Ç—ñ–ª—å–∫–∏ –Ω–∞ –ø—É—Å—Ç—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ (–Ω–µ –ø–æ–≤–µ—Ä—Ö –∫–æ—Ä–∞–±–ª—ñ–≤)
            if self.game.computer_board.grid[y][x] == self.game.computer_board.grid[y][x].__class__.EMPTY:
                if (x, y) not in self.computer_rockets:
                    self.computer_rockets.add((x, y))
            attempts += 1

    # ------------------------
    # –ö–∏–¥–æ–∫ —Ä–∞–∫–µ—Ç–∏ –ø—ñ–¥ —á–∞—Å —Ö–æ–¥—É
    # ------------------------
    def enable_throw_mode(self):
        """–ê–∫—Ç–∏–≤—É—î —Ä–µ–∂–∏–º '–∫–∏–Ω—É—Ç–∏ —Ä–∞–∫–µ—Ç—É' ‚Äî –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–ª—ñ–∫ –ø–æ –ø–æ–ª—é –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∫–∏–Ω—É–≤ —Ä–∞–∫–µ—Ç—É."""
        if self.game.game_phase != "playing":
            return
        if self.rockets_remaining_for_player() <= 0:
            return
        self.mode = "throw"
        self.game.info_label.config(text="–†–µ–∂–∏–º: –∫–∏–Ω—É—Ç–∏ —Ä–∞–∫–µ—Ç—É. –ö–ª—ñ–∫–Ω—ñ—Ç—å –ø–æ –ø–æ–ª—é –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –¥–ª—è —Ü—ñ–ª—ñ.")

    def cancel_throw_mode(self):
        self.mode = None
        self.game.update_info_label()

    def rockets_remaining_for_player(self) -> int:
        used = len(getattr(self.game, "player_rockets_used", []))
        return max(0, self.rockets_limit_count - used)

    def _use_player_rocket(self):
        self.game.player_rockets_used.append(True)

    def _get_rocket_radius(self) -> int:
        """–ü–æ–≤–µ—Ä—Ç–∞—î 'radius' —É –∫–ª—ñ—Ç–∏–Ω–∫–∞—Ö: radius=0 => 1x1; radius=1 => 3x3"""
        return 0 if self.board_size == 6 else 1

    def throw_rocket_at(self, target_board_name: str, x: int, y: int):
        """
        –í–∏–∫–æ–Ω—É—î –ª–æ–≥—ñ–∫—É –≤–∏–±—É—Ö—É: —è–∫—â–æ radius=0 => 1x1, —ñ–Ω–∞–∫—à–µ 3x3.
        –ü–æ–≤–µ—Ä—Ç–∞—î (hit_any, coords_hit) —è–∫ —ñ —Å—Ç–∞—Ä–∏–π –º–æ–¥—É–ª—å.
        """
        if target_board_name == "computer":
            board = self.game.computer_board
        else:
            board = self.game.player_board

        radius = self._get_rocket_radius()
        hit_any = False
        coords_hit = []

        for dy in range(-radius, radius + 1):
            for dx in range(-radius, radius + 1):
                tx = x + dx
                ty = y + dy
                if 0 <= tx < self.board_size and 0 <= ty < self.board_size:
                    if not board.revealed[ty][tx]:
                        hit, sunk, ship = board.attack(tx, ty)
                        board.revealed[ty][tx] = True
                        coords_hit.append((tx, ty, hit))
                        if hit:
                            hit_any = True

        # –∞–Ω—ñ–º–∞—Ü—ñ—è –≤–∏–±—É—Ö—É –Ω–∞ canvas (–æ–±–ª–∞—Å—Ç—å –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ radius)
        target_canvas = self.computer_canvas if target_board_name == "computer" else self.player_canvas
        self._animate_explosion(target_canvas, x, y, radius)

        # —è–∫—â–æ –∫–∏–¥–∞–ª–∞ –≥—Ä–∞–≤–µ—Ü—å ‚Äî –≤—ñ–¥–º—ñ—á–∞—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        if target_board_name == "computer":
            self._use_player_rocket()

        # —è–∫—â–æ –∫–∏–¥–∞–ª–∞ AI —ñ –±—É–ª–∞ —Ä–∞–∫–µ—Ç–∞ –∑ computer_rockets, –≤–∏–¥–∞–ª—è—î–º–æ —ó—ó
        if target_board_name == "player":
            # —è–∫—â–æ —Ç–∞–º –±—É–ª–∞ —Ä–∞–∫–µ—Ç–∞ –∫–æ–º–ø'—é—Ç–µ—Ä–∞ ‚Äî –≤–∏–¥–∞–ª–∏–º–æ
            if (x, y) in self.computer_rockets:
                self.computer_rockets.remove((x, y))

        # –∫–æ–ª–±–µ–∫ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI/–ª–æ–≥—ñ–∫–∏
        if self.on_rocket_thrown_callback:
            self.on_rocket_thrown_callback(target_board_name, x, y, radius)

        return hit_any, coords_hit

    # ------------------------
    # –ì—Ä–∞—Ñ—ñ–∫–∞
    # ------------------------
    def _canvas_cell_bbox(self, canvas: tk.Canvas, col: int, row: int) -> Tuple[int, int, int, int]:
        cs = self.game.cell_size
        x1 = col * cs
        y1 = row * cs
        x2 = x1 + cs
        y2 = y1 + cs
        return x1, y1, x2, y2

    def draw_rockets_on_player_canvas(self):
        """–ú–∞–ª—é—î–º–æ —ñ–∫–æ–Ω–∫–∏ —Ä–∞–∫–µ—Ç –Ω–∞ –ø–æ–ª—ñ –≥—Ä–∞–≤—Ü—è (–ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –∫–æ—Ä–∞–±–ª—ñ–≤)."""
        canvas = self.player_canvas
        canvas.delete("rocket_icon")
        for (x, y) in self.player_rockets:
            x1, y1, x2, y2 = self._canvas_cell_bbox(canvas, x, y)
            cx = (x1 + x2) / 2
            cy = (y1 + y2) / 2
            r = min(self.game.cell_size, 24) / 2
            canvas.create_oval(cx - r, cy - r, cx + r, cy + r, fill="#88c0d0", outline="#3b82a5", tags=("rocket_icon",))
            canvas.create_text(cx, cy, text="üöÄ", font=("Arial", int(r)), tags=("rocket_icon",))

    def _animate_explosion(self, canvas: tk.Canvas, center_col: int, center_row: int, radius: int):
        """–ï—Ñ–µ–∫—Ç –≤–∏–±—É—Ö—É: –Ω–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∏–π –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫ –Ω–∞–¥ –æ–±–ª–∞—Å—Ç—é —Ç–∞ –µ–º–æ–¥–∑—ñ 'üí•'."""
        cs = self.game.cell_size
        left = max(0, (center_col - radius) * cs)
        top = max(0, (center_row - radius) * cs)
        right = min(canvas.winfo_width(), (center_col + radius + 1) * cs)
        bottom = min(canvas.winfo_height(), (center_row + radius + 1) * cs)

        rect = canvas.create_rectangle(left, top, right, bottom, fill="#ff6b6b", stipple="gray50", outline="", tags=("rocket_anim",))
        texts = []
        for dy in range(-radius, radius + 1):
            for dx in range(-radius, radius + 1):
                tx = center_col + dx
                ty = center_row + dy
                if 0 <= tx < self.board_size and 0 <= ty < self.board_size:
                    x1, y1, x2, y2 = self._canvas_cell_bbox(canvas, tx, ty)
                    cx = (x1 + x2) / 2
                    cy = (y1 + y2) / 2
                    t = canvas.create_text(cx, cy, text="üí•", font=("Arial", int(cs/2)), tags=("rocket_anim",))
                    texts.append(t)

        self.root.update_idletasks()

        def clear():
            try:
                canvas.delete("rocket_anim")
            except tk.TclError:
                pass

        self.root.after(600, clear)

    # ------------------------
    # UI: –∫–Ω–æ–ø–∫–∞ —Ç–∞ –ª—ñ—á–∏–ª—å–Ω–∏–∫
    # ------------------------
    def create_rocket_controls(self, parent_frame: tk.Frame):
        container = tk.Frame(parent_frame, bg="#1a1a2e")
        container.pack(side=tk.LEFT, padx=6)

        self.rocket_button = tk.Button(
            container,
            text=f"üöÄ –ö–∏–Ω—É—Ç–∏ —Ä–∞–∫–µ—Ç—É",
            font=("Arial", 12, "bold"),
            bg="#ff9f43",
            fg="#1a1a2e",
            activebackground="#ff8c1a",
            relief=tk.FLAT,
            padx=14,
            pady=8,
            cursor="hand2",
            command=self.enable_throw_mode
        )
        self.rocket_button.pack(side=tk.LEFT, padx=(0, 6))

        self.rockets_label = tk.Label(
            container,
            text=f"√ó{self.rockets_limit_count}",
            font=("Arial", 12, "bold"),
            fg="#ffd166",
            bg="#1a1a2e"
        )
        self.rockets_label.pack(side=tk.LEFT)

        self._update_rockets_label()

    def _update_rockets_label(self):
        used = len(getattr(self.game, "player_rockets_used", []))
        remaining = max(0, self.rockets_limit_count - used)
        if self.rockets_label:
            self.rockets_label.config(text=f"√ó{remaining}")
        if self.rocket_button:
            if remaining <= 0:
                self.rocket_button.config(state=tk.DISABLED)
            else:
                self.rocket_button.config(state=tk.NORMAL)

    # ------------------------
    # AI: –∫–æ–º–ø'—é—Ç–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ä–∞–∫–µ—Ç–∏
    # ------------------------
    def ai_maybe_throw(self):
        """
        –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—ñ–¥ —á–∞—Å —Ö–æ–¥—É –∫–æ–º–ø'—é—Ç–µ—Ä–∞ ‚Äî –∑ –ø–µ–≤–Ω–∏–º —à–∞–Ω—Å–æ–º –∫–æ–º–ø –∫–∏–¥–∞—î —Ä–∞–∫–µ—Ç—É.
        –ü–æ–≤–µ—Ä—Ç–∞—î True —è–∫—â–æ –±—É–ª–∞ –∫–∏–Ω—É—Ç–∞ —Ä–∞–∫–µ—Ç–∞ —ñ –≤–æ–Ω–∞ –≤–ª—É—á–∏–ª–∞ —Ö–æ—á–∞ –± –≤ –æ–¥–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É (hit_any).
        """
        # –∫–æ–º–ø'—é—Ç–µ—Ä –∫–∏–¥–∞—î —Ä–∞–∫–µ—Ç—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —É –Ω—å–æ–≥–æ —î —Ö–æ—á–∞ –± –æ–¥–Ω–∞ (–∫–æ–º–ø'—é—Ç–µ—Ä_—Ä–∞–∫–µ—Ç–∫–∏)
        if not self.computer_rockets and len(self.computer_rockets) == 0:
            # —è–∫—â–æ –∫–æ–º–ø'—é—Ç–µ—Ä –Ω–µ –º–∞–≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ —Ä–æ–∑—Å—Ç–∞–≤–ª–µ–Ω–∏—Ö —Ä–∞–∫–µ—Ç, –¥–∞—î–º–æ –π–æ–º—É —à–∞–Ω—Å –∫–∏–Ω—É—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—É,
            # –∞–ª–µ –æ–±–º–µ–∂–∏–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–æ–¥—ñ–≤: —ñ–º–ø–ª–µ–º–µ–Ω—Ç—É—î–º–æ —à–∞–Ω—Å –ª–∏—à–µ –∫–æ–ª–∏ —Ä–∞–Ω–¥–æ–º –ø—Ä–æ–π—à–æ–≤.
            # –¢—É—Ç –ª–æ–≥—ñ–∫–∞: —è–∫—â–æ —î –ª—ñ–º—ñ—Ç, –∫–æ–º–ø –º–æ–∂–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—É —Ä–∞–∫–µ—Ç—É —Ç–∞ –∫–∏–Ω—É—Ç–∏ —ó—ó.
            # —à–∞–Ω—Å –∫–∏–¥–∫–∞
            chance = 0.15  # 15% —à–∞–Ω—Å –∫–∏–Ω—É—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—É —Ä–∞–∫–µ—Ç—É
            if random.random() > chance:
                return False
            # –æ–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É —Ü—ñ–ª—å
            tx = random.randint(0, self.board_size - 1)
            ty = random.randint(0, self.board_size - 1)
            hit_any, _ = self.throw_rocket_at("player", tx, ty)
            return hit_any

        # —è–∫—â–æ –∫–æ–º–ø'—é—Ç–µ—Ä —Ä–æ–∑—Å—Ç–∞–≤–∏–≤ —Å–≤–æ—ó —Ä–∞–∫–µ—Ç–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –æ–¥–Ω—É –∑ –Ω–∏—Ö —ñ–∑ —ñ–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é
        if self.computer_rockets:
            # —à–∞–Ω—Å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–∞–∫–µ—Ç–∏ –∑–∞—Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 25%)
            if random.random() > 0.25:
                return False
            tx, ty = random.choice(tuple(self.computer_rockets))
            # –≤–∏–∫–æ–Ω—É—î–º–æ –≤–∏–±—É—Ö –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó —Ä–∞–∫–µ—Ç–∏
            hit_any, _ = self.throw_rocket_at("player", tx, ty)
            # –ø—ñ—Å–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤–∏–¥–∞–ª—è—î–º–æ —ó—ó
            if (tx, ty) in self.computer_rockets:
                self.computer_rockets.remove((tx, ty))
            return hit_any

        return False
